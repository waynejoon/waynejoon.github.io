{"posts":[{"title":"玄机靶场 | blueteam的小心思","text":"前言日常玄机靶场刷题记录 步骤#1.1题目：攻击者通过什么密码成功登录了网站的后台？提交密码字符串的小写md5值，格式flag{md5}。 在根目录发现wireshark.pcap文件，可以用wireshark进行流量分析 将文件通过SFTP传到本地，过滤出http流量 一个一个分析，发现可疑流量，直接得到账号密码 md5加密得 1flag{d63edb0e9df4cf411398e3658c0237e0} 步骤#1.2题目：攻击者在哪个PHP页面中成功上传了后门文件？例如upload.php页面，上传字符串”upload.php”的小写md5值，格式flag{md5}。 继续往下分析，发现可疑流量 发现这里上传了一个zip压缩包，追踪TCP流 发现一句话木马，确定攻击者是通过该页面上传木马文件，加密pluginmgr.php字符得到 1flag{b05c0be368ffa72e6cb2df7e1e1b27be} 步骤#1.3题目：找到攻击者上传的webshell文件，提交该文件的小写md5值，格式flag{md5}。 直接查找关键字 1grep -r --include=&quot;*.php&quot; 'eval($_POST' / 加密文件得到flag 1flag{a097b773ced57bb7d51c6719fe8fe5f5} 步骤#1.4题目：攻击者后续又下载了一个可执行的后门程序，提交该文件的小写md5值，格式flag{md5}。 继续分析流量，发现可疑流量 发现这个木马文件在尝试下载一个文件，直接搜索这个文件 1find / -name &quot;is.world&quot; 这里有个坑，不能直接加密文件，要用引号括起来再加密，不然中间的空格会分隔指令 1md5sum &quot;/var/www/html/plugins/. /is.world&quot; 得到flag 1flag{ee279c39bf3dcb225093bdbafeb9a439} 步骤#1.5题目：攻击者创建了后门用户的名称是？例如attack恶意用户，上传字符串”attack”的小写md5值，格式flag{md5}。 查看用户列表 1cat /etc/passwd 发现有个用户的用户ID和组ID都为0，权限很高，一般情况下只有管理员的UID和GID为0，说明这个是后门用户，直接加密得到flag 1flag{4cda3461543c9a770a3349760594facd} 步骤#1.6题目：攻击者创建了一个持久化的配置项，导致任意用户登录就会触发后门的连接。提交该配置项对应配置文件的小写md5值，格式flag{md5}。 一般这种情况是修改了shell配置文件，常见的配置文件包括 123456789101112用户级别1、&quot;~/.bashrc&quot; 用于配置非登录 Shell 的环境（例如桌面终端）, 每次启动新的非登录 Shell 时加载2、&quot;~/.bash_profile&quot; 用于配置 登录 Shell 的环境, 每次登录（例如通过 SSH 或控制台登录系统）3、&quot;~/.profile&quot; 用于配置 登录 Shell 环境变量, 在用户登录时执行4、&quot;~/.zshrc&quot; 每次启动 Z Shell 的非登录会话时加载5、&quot;~/.bash_logout&quot; 在用户退出登录 Shell 时执行系统级别1、&quot;/etc/profile&quot; 用于设置所有用户的登录 Shell 环境变量, 所有用户登录时加载2、&quot;/etc/bash.bashrc&quot; 提供全局的非登录 Shell 配置, 每次启动新的非登录 Shell 时加载3、&quot;/etc/profile.d/*.sh&quot; 当 /etc/profile 加载时, 会依次加载 /etc/profile.d 中的所有脚本文件（通常是 .sh 文件）4、&quot;/etc/environment&quot; 用于配置系统范围的环境变量, 在用户登录前加载，影响所有用户和守护进程 一般情况执行顺序，可以用作参考 12345678910111.登录 Shell 系统级配置文件： /etc/profile /etc/profile.d/*.sh 用户级配置文件： ~/.bash_profile（如果不存在，则加载 ~/.profile）2.非登录 Shell 系统级配置文件： /etc/bash.bashrc（如果系统支持） 用户级配置文件： ~/.bashrc 这里一个一个尝试即可，发现/etc/profile有问题 直接md5sum加密得到flag 12md5sum /etc/profile#flag{65bf3e4a9ac90d75ec28be0317775618} 步骤#1.7题目：攻击者创建了一个持久化的配置项，导致只有root用户登录才会触发后门的连接。提交该配置项对应配置文件的小写md5值，格式flag{md5}。 搜索后门触发命令，这里搜索的是用户目录下的可疑配置文件 1grep -r -E '(nc|curl|wget|bash|python|eval|base64)' ~/ 发现有个配置文件尝试外联恶意网址 直接加密得到flag 1flag{4acc9c465eeeb139c194893ec0a8bcbc} 步骤#1.8题目：攻击者加密了哪个数据库？提交数据库的文件夹名，例如user数据库对应存放位置为user文件夹，上传字符串”user”的小写md5值，格式flag{md5}。 确定数据库类型 1systemctl list-units --type=service | grep -E '(mysql|mariadb|postgresql|mongodb|redis)' 查看数据库的登录信息，一般放在配置文件“config.inc.php”里面 1find / -name config.inc.php 得到数据库账号密码，用 Premium连接，一个一个尝试，发现有个数据库无法查看，说明被加密了，这里用的网图 查找对应文件，可以得到文件所在路径 1find / -name JPMorgan@0020Chase 加密文件夹名得到flag 1flag{0928a5424aa6126e5923980ca103560e} 步骤#1.9题目：解密数据库，提交Harper用户对应Areer的值。提交Areer值的小写md5值，格式flag{md5}。 查看mysql文件夹，发现有个可疑文件 直接抓取内容看看，发现是个加密脚本 这里要写一个逆推脚本，参考网上的文章 123456789101112131415&lt;?php $currentDate = date(&quot;Y-m-d&quot;); $key = md5('2023-11-18'); $iv = substr(hash('sha256', &quot;DeepMountainsGD&quot;), 0, 16); $filePath = &quot;/var/lib/mysql/JPMorgan@0020Chase&quot;; $files = scandir($filePath); foreach ($files as $file) { if ($file != &quot;.&quot; &amp;&amp; $file != &quot;..&quot;) { $fullPath = $filePath . '/' . $file; $encryptedContent = file_get_contents($fullPath); $decryptedContent = openssl_decrypt($encryptedContent, 'aes-256-cbc', $key, 0, $iv); file_put_contents($fullPath, $decryptedContent); } } ?&gt; 这里的时间是JPMorgan@0020Chase的创建时间 1stat JPMorgan@0020Chase #查看详细信息 把脚本写进/var/www/mysql/目录 1vim 1.php 先按i插入代码，然后按一下Esc，再按住shift + :，然后输入wq保存 运行代码 1php 1.php 重启数据库 1systemctl restart mysql 这时再返回Premium，可以发现数据库解密了，Harper用户对应Areer为Chef，加密即可 1flag{8fd82b8864d71ed7fa12b59e6e34cd1c} 步骤#1.10题目：因为什么文件中的漏洞配置，导致了攻击者成功执行命令并提权。提交该文件的小写md5值，格式flag{md5}。 这里攻击者用到提权，可以查找以 root 用户身份拥有并设置了 SUID（Set User ID）权限的文件。 1find / -user root -perm -4000 2&gt;/dev/null #4000 代表文件权限中的 SUID 位。 当一个文件被设置了 SUID 位，并且用户执行该文件时，该程序会以文件拥有者（通常是 root）的权限运行，而不是以当前用户的权限运行 发现/usr/bin/sudo，sudo 被广泛用于权限提升，估计攻击者通过这个提权，/etc/sudoers 包含了系统上 sudo 的配置和权限设置，这里抓取内容看一下 1cat /etc/sudoers www-data用户被赋予了root权限，而且不需要输入密码，到这里已经可以确认漏洞配置了，就是/etc/sudoers ，加密文件得到flag 1flag{6585817513b0ea96707ebb0d04d6aeff}","link":"/2025/01/25/Xuanji-CTF-Blue-Team-Forensics/"},{"title":"玄机靶场 | Where-1S-tHe-Hacker","text":"前言我一开始用的是在线靶机，但是因为一些不可抗拒因素，具体参考步骤#11，所以最终把靶机下载到本地分析，同时也能省点金币，题目可以在划水但不摆烂公众号下载 题目下载地址：https://pan.baidu.com/s/1MwRbI6Cbz2j_hlHInVL1Bg?pwd=fmzu 服务器账号密码 admin Aa123456 注：样本请勿在本地运行 索引 步骤#1通过本地 PC RDP到服务器并且找到黑客ID 为多少,将黑客ID 作为 FLAG 提交; 打开网页根目录，发现index.php被挂了黑页，在文件内容里面找到黑客ID 1flag{X123567X} 步骤#2通过本地 PC RDP到服务器并且找到黑客在什么时间修改了网站主页,将黑客修改了网站主页的时间 作为 FLAG 提交（y-m-d-4:22:33）; 直接查看属性，找到修改时间 提交的时候有个问题，如果时间你是直接复制属性中的，提交时会显示错误，因为属性中的时间携带不可见字符，正确的做法是自己手打进去，具体可以看看010editor的分析 1flag{2023-11-6-4:55:13} 步骤#3通过本地 PC RDP到服务器并且找到黑客第一个webshell文件名是,将第一个webshell文件名 作为FLAG 提交; 可以用D盾，也可以手工排查，这里我选择手工排查 找到Apache目录下的访问日志 前面大量的HEAD表示的是黑客在进行目录扫描，可以不看，直接跳到后半部分扫描结束那里，通过排查，发现两个疑似webshell的可疑文件 去根目录下找到对应的文件，查看进行确认 发现两个都是黑客上传的webshell文件，按照时间顺序，第一个webshell文件名是SystemConfig.php 1flag{SystemConfig.php} 步骤#4通过本地 PC RDP到服务器并且找到黑客第二个webshell文件名是,将第二个webshell文件名 作为FLAG 提交; 同上，第二个webshell文件名是syscon.php 1flag{syscon.php} 步骤#5通过本地 PC RDP到服务器并且找到黑客第二个webshell的连接密码是,将第二个webshell的连接密码 作为FLAG 提交; 步骤三那里可以得到第二个webshell的连接密码是pass 1flag{pass} 步骤#6通过本地 PC RDP到服务器并且找到黑客新建的隐藏账户,将新建的隐藏账户名字 作为FLAG 提交; 有很多方法可以实现，这里选择注册表查看 win+r然后输入regedit打开注册表编辑器，找到HKEY_LOCAL_MACHINE\\SAM\\SAM，但是这里不能直接查看，我们右键点击SAM，赋予完全控制权限 然后重新打开注册表，进入HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users\\Names，找到当前计算机全部用户，发现隐藏用户为admin$ 有时候攻击者可能不会直接新增隐藏用户，而是通过修改Guest用户注册表对应的F值（权限分配）与本地管理Administrator的权限相同，相当于克隆了Administrator，这也需要我们额外注意 还有一个方法，就是直接在此电脑那里查看，更快速，但是平时的话还是建议用注册表来分析，更加精准 1flag{admin$} 步骤#7通过本地 PC RDP到服务器并且找到黑客隐藏账户创建时间是,将隐藏账户创建时间是 作为FLAG 提交（答案格式：2024/12/3 9:16:23）; 直接cmd打开，输入net user admin$查看账户详细信息 1flag{2023/11/6 4:45:34} 步骤#8通过本地 PC RDP到服务器并且找到黑客添加隐藏账户进管理员组的时间,将添加隐藏账户进管理员组的时间 作为FLAG 提交（答案格式：2024/12/3 9:16:23）; 这里要用到系统事件分析，按Win+R键输入eventvwr.msc打开事件查看器 常见事件ID类型 12345678910111213144624 登录成功4625 登录失败，如果有人尝试破解系统密码，可以看到大量连续登录失败信息4726 删除用户4722 账号启用4725 账号禁用4723 修改密码4724 重置密码4634 注销成功4647 用户启动的注销4672 管理员登录4720 创建用户，使用系统漏洞攻击成功后，往往会创建一个用户，方便远程登录4732 加入安全组，常见于将新用户加入管理员组4733 移除出安全组4684 通过登陆界面登陆的 这里我们筛选4732，时间的话我们根据admin$的创建时间，选择2023/11/6 4:45:00开始，结束时间随便，可以选小点缩小范围 一个个点进去查看，找到添加到管理员组的事件 注意时间格式 1flag{2023/11/6 4:46:07} 步骤#9通过本地 PC RDP到服务器并且找到黑客在什么时间从文件中读取保留的密钥,将读取保留的密钥的时间 作为FLAG 提交（答案格式：2024/12/3 9:16:23）; 这里我们聚焦于两个事件ID 125051 将保留的密钥写入文件5058 从文件中读取保留的密钥 也是通过事件查看器去找，时间我这里选择不变 也是按时间顺序找就行 注意时间格式 1flag{2023/11/6 4:46:58} 步骤#10通过本地 PC RDP到服务器并且找到黑客通过隐藏账户通过(PTH)哈希传递攻击登录的时间是,将(PTH)哈希传递攻击登录的时间 作为FLAG 提交; 哈希传递攻击指的是攻击者无需知道用户的明文密码，只需窃取密码的哈希值（Hash），就能冒充该用户登录到网络中的其他系统。 这里我们聚焦于NtLmSsp（NT LAN Manager Security Support Provider），它用于处理 NTLM 协议的身份验证，我们去筛选登录事件，找到登录进程为NtLmSsp的即可，对应的事件ID为4624 按照时间顺序一个个筛选 注意时间格式 1flag{2023/11/6 4:47:28} 步骤#11通过本地 PC RDP到服务器并且找到黑客上传的两个CobaltStrike木马文件名,将上传的两个CobaltStrike木马文件名 作为FLAG 提交（答案格式：”A.exe,B.exe”）; 这里用绿盟D-Eyes主机命令行应急工具，将工具上传到目标机器，cmd输入D-Eyes fs扫盘 如果是多盘路径可以用D-Eyes fs -P C:\\\\,D:\\\\tmp,D:\\\\tools，也可以用D-Eyes.exe ps进行进程扫描，排查异常进程信息 这里我们就使用D-Eyes fs扫盘 这里只找到之前的webshell文件，并没有找到cs可疑文件，原因是部分文件被Windows Defender自动隔离了，需要从隔离区恢复 这里有个问题，如果用的是玄机靶场的话，已隔离威胁那里是找不到这些被隔离的文件，估计是那边默认给删除了，然后没被工作人员发现 所以我用的是下载来的靶场，还原文件之后再扫一遍，排查可疑文件，发现多了两个文件 把SystemTemp.exe和SysnomT.exe放进安恒云沙箱检测（拉取文件到本地之后不要运行） 可以看到这两个文件都是cs控制程序 1flag{SystemTemp.exe,SysnomT.exe} 靶机内部题目答案这是靶机内部答题.exe的答案，不是玄机靶场的答案，玄机的答案在上面 1234567891011X123567X2023‎年‎11‎月‎6‎日，‏‎4:55:13SystemConfig.phpsyscon.phppassadmin$2023/11/6 4:45:342023/11/6 4:46:072023/11/6 4:46:582023/11/6 4:47:28SystemTemp.exe和SysnomT.exe 参考特别鸣谢 划水但不摆烂：https://mp.weixin.qq.com/s/4UoIw-On-0taB8s0xtjkAw Peterpan.exe：https://blog.csdn.net/administratorlws/article/details/141672688","link":"/2025/06/18/Xuanji-CTF-Where-Is-The-Hacker/"}],"tags":[{"name":"应急响应","slug":"应急响应","link":"/tags/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"}],"categories":[{"name":"应急响应","slug":"应急响应","link":"/categories/%E5%BA%94%E6%80%A5%E5%93%8D%E5%BA%94/"}],"pages":[]}